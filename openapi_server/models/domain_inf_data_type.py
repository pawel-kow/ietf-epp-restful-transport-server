from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.domain_auth_info_type import DomainAuthInfoType
from openapi_server.models.domain_contact_type import DomainContactType
from openapi_server.models.domain_ns_type import DomainNsType
from openapi_server.models.domain_status_type import DomainStatusType
from openapi_server import util

from openapi_server.models.domain_auth_info_type import DomainAuthInfoType  # noqa: E501
from openapi_server.models.domain_contact_type import DomainContactType  # noqa: E501
from openapi_server.models.domain_ns_type import DomainNsType  # noqa: E501
from openapi_server.models.domain_status_type import DomainStatusType  # noqa: E501

class DomainInfDataType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_info=None, cl_id=None, contact=None, cr_date=None, cr_id=None, ex_date=None, host=None, name=None, ns=None, registrant=None, roid=None, status=None, tr_date=None, up_date=None, up_id=None):  # noqa: E501
        """DomainInfDataType - a model defined in OpenAPI

        :param auth_info: The auth_info of this DomainInfDataType.  # noqa: E501
        :type auth_info: DomainAuthInfoType
        :param cl_id: The cl_id of this DomainInfDataType.  # noqa: E501
        :type cl_id: str
        :param contact: The contact of this DomainInfDataType.  # noqa: E501
        :type contact: List[DomainContactType]
        :param cr_date: The cr_date of this DomainInfDataType.  # noqa: E501
        :type cr_date: datetime
        :param cr_id: The cr_id of this DomainInfDataType.  # noqa: E501
        :type cr_id: str
        :param ex_date: The ex_date of this DomainInfDataType.  # noqa: E501
        :type ex_date: datetime
        :param host: The host of this DomainInfDataType.  # noqa: E501
        :type host: List[str]
        :param name: The name of this DomainInfDataType.  # noqa: E501
        :type name: str
        :param ns: The ns of this DomainInfDataType.  # noqa: E501
        :type ns: DomainNsType
        :param registrant: The registrant of this DomainInfDataType.  # noqa: E501
        :type registrant: str
        :param roid: The roid of this DomainInfDataType.  # noqa: E501
        :type roid: str
        :param status: The status of this DomainInfDataType.  # noqa: E501
        :type status: List[DomainStatusType]
        :param tr_date: The tr_date of this DomainInfDataType.  # noqa: E501
        :type tr_date: datetime
        :param up_date: The up_date of this DomainInfDataType.  # noqa: E501
        :type up_date: datetime
        :param up_id: The up_id of this DomainInfDataType.  # noqa: E501
        :type up_id: str
        """
        self.openapi_types = {
            'auth_info': DomainAuthInfoType,
            'cl_id': str,
            'contact': List[DomainContactType],
            'cr_date': datetime,
            'cr_id': str,
            'ex_date': datetime,
            'host': List[str],
            'name': str,
            'ns': DomainNsType,
            'registrant': str,
            'roid': str,
            'status': List[DomainStatusType],
            'tr_date': datetime,
            'up_date': datetime,
            'up_id': str
        }

        self.attribute_map = {
            'auth_info': 'authInfo',
            'cl_id': 'clID',
            'contact': 'contact',
            'cr_date': 'crDate',
            'cr_id': 'crID',
            'ex_date': 'exDate',
            'host': 'host',
            'name': 'name',
            'ns': 'ns',
            'registrant': 'registrant',
            'roid': 'roid',
            'status': 'status',
            'tr_date': 'trDate',
            'up_date': 'upDate',
            'up_id': 'upID'
        }

        self._auth_info = auth_info
        self._cl_id = cl_id
        self._contact = contact
        self._cr_date = cr_date
        self._cr_id = cr_id
        self._ex_date = ex_date
        self._host = host
        self._name = name
        self._ns = ns
        self._registrant = registrant
        self._roid = roid
        self._status = status
        self._tr_date = tr_date
        self._up_date = up_date
        self._up_id = up_id

    @classmethod
    def from_dict(cls, dikt) -> 'DomainInfDataType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The domain_infDataType of this DomainInfDataType.  # noqa: E501
        :rtype: DomainInfDataType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_info(self) -> DomainAuthInfoType:
        """Gets the auth_info of this DomainInfDataType.


        :return: The auth_info of this DomainInfDataType.
        :rtype: DomainAuthInfoType
        """
        return self._auth_info

    @auth_info.setter
    def auth_info(self, auth_info: DomainAuthInfoType):
        """Sets the auth_info of this DomainInfDataType.


        :param auth_info: The auth_info of this DomainInfDataType.
        :type auth_info: DomainAuthInfoType
        """

        self._auth_info = auth_info

    @property
    def cl_id(self) -> str:
        """Gets the cl_id of this DomainInfDataType.


        :return: The cl_id of this DomainInfDataType.
        :rtype: str
        """
        return self._cl_id

    @cl_id.setter
    def cl_id(self, cl_id: str):
        """Sets the cl_id of this DomainInfDataType.


        :param cl_id: The cl_id of this DomainInfDataType.
        :type cl_id: str
        """
        if cl_id is None:
            raise ValueError("Invalid value for `cl_id`, must not be `None`")  # noqa: E501
        if cl_id is not None and len(cl_id) > 16:
            raise ValueError("Invalid value for `cl_id`, length must be less than or equal to `16`")  # noqa: E501
        if cl_id is not None and len(cl_id) < 3:
            raise ValueError("Invalid value for `cl_id`, length must be greater than or equal to `3`")  # noqa: E501

        self._cl_id = cl_id

    @property
    def contact(self) -> List[DomainContactType]:
        """Gets the contact of this DomainInfDataType.


        :return: The contact of this DomainInfDataType.
        :rtype: List[DomainContactType]
        """
        return self._contact

    @contact.setter
    def contact(self, contact: List[DomainContactType]):
        """Sets the contact of this DomainInfDataType.


        :param contact: The contact of this DomainInfDataType.
        :type contact: List[DomainContactType]
        """
        if contact is not None and len(contact) < 0:
            raise ValueError("Invalid value for `contact`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._contact = contact

    @property
    def cr_date(self) -> datetime:
        """Gets the cr_date of this DomainInfDataType.


        :return: The cr_date of this DomainInfDataType.
        :rtype: datetime
        """
        return self._cr_date

    @cr_date.setter
    def cr_date(self, cr_date: datetime):
        """Sets the cr_date of this DomainInfDataType.


        :param cr_date: The cr_date of this DomainInfDataType.
        :type cr_date: datetime
        """

        self._cr_date = cr_date

    @property
    def cr_id(self) -> str:
        """Gets the cr_id of this DomainInfDataType.


        :return: The cr_id of this DomainInfDataType.
        :rtype: str
        """
        return self._cr_id

    @cr_id.setter
    def cr_id(self, cr_id: str):
        """Sets the cr_id of this DomainInfDataType.


        :param cr_id: The cr_id of this DomainInfDataType.
        :type cr_id: str
        """
        if cr_id is not None and len(cr_id) > 16:
            raise ValueError("Invalid value for `cr_id`, length must be less than or equal to `16`")  # noqa: E501
        if cr_id is not None and len(cr_id) < 3:
            raise ValueError("Invalid value for `cr_id`, length must be greater than or equal to `3`")  # noqa: E501

        self._cr_id = cr_id

    @property
    def ex_date(self) -> datetime:
        """Gets the ex_date of this DomainInfDataType.


        :return: The ex_date of this DomainInfDataType.
        :rtype: datetime
        """
        return self._ex_date

    @ex_date.setter
    def ex_date(self, ex_date: datetime):
        """Sets the ex_date of this DomainInfDataType.


        :param ex_date: The ex_date of this DomainInfDataType.
        :type ex_date: datetime
        """

        self._ex_date = ex_date

    @property
    def host(self) -> List[str]:
        """Gets the host of this DomainInfDataType.


        :return: The host of this DomainInfDataType.
        :rtype: List[str]
        """
        return self._host

    @host.setter
    def host(self, host: List[str]):
        """Sets the host of this DomainInfDataType.


        :param host: The host of this DomainInfDataType.
        :type host: List[str]
        """
        if host is not None and len(host) < 0:
            raise ValueError("Invalid value for `host`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._host = host

    @property
    def name(self) -> str:
        """Gets the name of this DomainInfDataType.


        :return: The name of this DomainInfDataType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DomainInfDataType.


        :param name: The name of this DomainInfDataType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def ns(self) -> DomainNsType:
        """Gets the ns of this DomainInfDataType.


        :return: The ns of this DomainInfDataType.
        :rtype: DomainNsType
        """
        return self._ns

    @ns.setter
    def ns(self, ns: DomainNsType):
        """Sets the ns of this DomainInfDataType.


        :param ns: The ns of this DomainInfDataType.
        :type ns: DomainNsType
        """

        self._ns = ns

    @property
    def registrant(self) -> str:
        """Gets the registrant of this DomainInfDataType.


        :return: The registrant of this DomainInfDataType.
        :rtype: str
        """
        return self._registrant

    @registrant.setter
    def registrant(self, registrant: str):
        """Sets the registrant of this DomainInfDataType.


        :param registrant: The registrant of this DomainInfDataType.
        :type registrant: str
        """
        if registrant is not None and len(registrant) > 16:
            raise ValueError("Invalid value for `registrant`, length must be less than or equal to `16`")  # noqa: E501
        if registrant is not None and len(registrant) < 3:
            raise ValueError("Invalid value for `registrant`, length must be greater than or equal to `3`")  # noqa: E501

        self._registrant = registrant

    @property
    def roid(self) -> str:
        """Gets the roid of this DomainInfDataType.


        :return: The roid of this DomainInfDataType.
        :rtype: str
        """
        return self._roid

    @roid.setter
    def roid(self, roid: str):
        """Sets the roid of this DomainInfDataType.


        :param roid: The roid of this DomainInfDataType.
        :type roid: str
        """
        if roid is None:
            raise ValueError("Invalid value for `roid`, must not be `None`")  # noqa: E501

        self._roid = roid

    @property
    def status(self) -> List[DomainStatusType]:
        """Gets the status of this DomainInfDataType.


        :return: The status of this DomainInfDataType.
        :rtype: List[DomainStatusType]
        """
        return self._status

    @status.setter
    def status(self, status: List[DomainStatusType]):
        """Sets the status of this DomainInfDataType.


        :param status: The status of this DomainInfDataType.
        :type status: List[DomainStatusType]
        """
        if status is not None and len(status) > 11:
            raise ValueError("Invalid value for `status`, number of items must be less than or equal to `11`")  # noqa: E501
        if status is not None and len(status) < 0:
            raise ValueError("Invalid value for `status`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._status = status

    @property
    def tr_date(self) -> datetime:
        """Gets the tr_date of this DomainInfDataType.


        :return: The tr_date of this DomainInfDataType.
        :rtype: datetime
        """
        return self._tr_date

    @tr_date.setter
    def tr_date(self, tr_date: datetime):
        """Sets the tr_date of this DomainInfDataType.


        :param tr_date: The tr_date of this DomainInfDataType.
        :type tr_date: datetime
        """

        self._tr_date = tr_date

    @property
    def up_date(self) -> datetime:
        """Gets the up_date of this DomainInfDataType.


        :return: The up_date of this DomainInfDataType.
        :rtype: datetime
        """
        return self._up_date

    @up_date.setter
    def up_date(self, up_date: datetime):
        """Sets the up_date of this DomainInfDataType.


        :param up_date: The up_date of this DomainInfDataType.
        :type up_date: datetime
        """

        self._up_date = up_date

    @property
    def up_id(self) -> str:
        """Gets the up_id of this DomainInfDataType.


        :return: The up_id of this DomainInfDataType.
        :rtype: str
        """
        return self._up_id

    @up_id.setter
    def up_id(self, up_id: str):
        """Sets the up_id of this DomainInfDataType.


        :param up_id: The up_id of this DomainInfDataType.
        :type up_id: str
        """
        if up_id is not None and len(up_id) > 16:
            raise ValueError("Invalid value for `up_id`, length must be less than or equal to `16`")  # noqa: E501
        if up_id is not None and len(up_id) < 3:
            raise ValueError("Invalid value for `up_id`, length must be greater than or equal to `3`")  # noqa: E501

        self._up_id = up_id
