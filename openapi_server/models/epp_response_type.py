from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.epp_ext_any_type import EppExtAnyType
from openapi_server.models.epp_msg_q_type import EppMsgQType
from openapi_server.models.epp_result_type import EppResultType
from openapi_server.models.epp_tr_id_type import EppTrIDType
from openapi_server import util

from openapi_server.models.epp_ext_any_type import EppExtAnyType  # noqa: E501
from openapi_server.models.epp_msg_q_type import EppMsgQType  # noqa: E501
from openapi_server.models.epp_result_type import EppResultType  # noqa: E501
from openapi_server.models.epp_tr_id_type import EppTrIDType  # noqa: E501

class EppResponseType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension=None, msg_q=None, res_data=None, result=None, tr_id=None):  # noqa: E501
        """EppResponseType - a model defined in OpenAPI

        :param extension: The extension of this EppResponseType.  # noqa: E501
        :type extension: EppExtAnyType
        :param msg_q: The msg_q of this EppResponseType.  # noqa: E501
        :type msg_q: EppMsgQType
        :param res_data: The res_data of this EppResponseType.  # noqa: E501
        :type res_data: EppExtAnyType
        :param result: The result of this EppResponseType.  # noqa: E501
        :type result: List[EppResultType]
        :param tr_id: The tr_id of this EppResponseType.  # noqa: E501
        :type tr_id: EppTrIDType
        """
        self.openapi_types = {
            'extension': EppExtAnyType,
            'msg_q': EppMsgQType,
            'res_data': EppExtAnyType,
            'result': List[EppResultType],
            'tr_id': EppTrIDType
        }

        self.attribute_map = {
            'extension': 'extension',
            'msg_q': 'msgQ',
            'res_data': 'resData',
            'result': 'result',
            'tr_id': 'trID'
        }

        self._extension = extension
        self._msg_q = msg_q
        self._res_data = res_data
        self._result = result
        self._tr_id = tr_id

    @classmethod
    def from_dict(cls, dikt) -> 'EppResponseType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The epp_responseType of this EppResponseType.  # noqa: E501
        :rtype: EppResponseType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension(self) -> EppExtAnyType:
        """Gets the extension of this EppResponseType.


        :return: The extension of this EppResponseType.
        :rtype: EppExtAnyType
        """
        return self._extension

    @extension.setter
    def extension(self, extension: EppExtAnyType):
        """Sets the extension of this EppResponseType.


        :param extension: The extension of this EppResponseType.
        :type extension: EppExtAnyType
        """

        self._extension = extension

    @property
    def msg_q(self) -> EppMsgQType:
        """Gets the msg_q of this EppResponseType.


        :return: The msg_q of this EppResponseType.
        :rtype: EppMsgQType
        """
        return self._msg_q

    @msg_q.setter
    def msg_q(self, msg_q: EppMsgQType):
        """Sets the msg_q of this EppResponseType.


        :param msg_q: The msg_q of this EppResponseType.
        :type msg_q: EppMsgQType
        """

        self._msg_q = msg_q

    @property
    def res_data(self) -> EppExtAnyType:
        """Gets the res_data of this EppResponseType.


        :return: The res_data of this EppResponseType.
        :rtype: EppExtAnyType
        """
        return self._res_data

    @res_data.setter
    def res_data(self, res_data: EppExtAnyType):
        """Sets the res_data of this EppResponseType.


        :param res_data: The res_data of this EppResponseType.
        :type res_data: EppExtAnyType
        """

        self._res_data = res_data

    @property
    def result(self) -> List[EppResultType]:
        """Gets the result of this EppResponseType.


        :return: The result of this EppResponseType.
        :rtype: List[EppResultType]
        """
        return self._result

    @result.setter
    def result(self, result: List[EppResultType]):
        """Sets the result of this EppResponseType.


        :param result: The result of this EppResponseType.
        :type result: List[EppResultType]
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501
        if result is not None and len(result) < 1:
            raise ValueError("Invalid value for `result`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._result = result

    @property
    def tr_id(self) -> EppTrIDType:
        """Gets the tr_id of this EppResponseType.


        :return: The tr_id of this EppResponseType.
        :rtype: EppTrIDType
        """
        return self._tr_id

    @tr_id.setter
    def tr_id(self, tr_id: EppTrIDType):
        """Sets the tr_id of this EppResponseType.


        :param tr_id: The tr_id of this EppResponseType.
        :type tr_id: EppTrIDType
        """
        if tr_id is None:
            raise ValueError("Invalid value for `tr_id`, must not be `None`")  # noqa: E501

        self._tr_id = tr_id
