from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class HostAddrType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value=None, ip=None):  # noqa: E501
        """HostAddrType - a model defined in OpenAPI

        :param value: The value of this HostAddrType.  # noqa: E501
        :type value: str
        :param ip: The ip of this HostAddrType.  # noqa: E501
        :type ip: str
        """
        self.openapi_types = {
            'value': str,
            'ip': str
        }

        self.attribute_map = {
            'value': '#value',
            'ip': '@ip'
        }

        self._value = value
        self._ip = ip

    @classmethod
    def from_dict(cls, dikt) -> 'HostAddrType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The host_addrType of this HostAddrType.  # noqa: E501
        :rtype: HostAddrType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> str:
        """Gets the value of this HostAddrType.


        :return: The value of this HostAddrType.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this HostAddrType.


        :param value: The value of this HostAddrType.
        :type value: str
        """
        if value is not None and len(value) > 45:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `45`")  # noqa: E501
        if value is not None and len(value) < 3:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `3`")  # noqa: E501

        self._value = value

    @property
    def ip(self) -> str:
        """Gets the ip of this HostAddrType.


        :return: The ip of this HostAddrType.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this HostAddrType.


        :param ip: The ip of this HostAddrType.
        :type ip: str
        """
        allowed_values = ["v4", "v6"]  # noqa: E501
        if ip not in allowed_values:
            raise ValueError(
                "Invalid value for `ip` ({0}), must be one of {1}"
                .format(ip, allowed_values)
            )

        self._ip = ip
