from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.epp_dcp_type import EppDcpType
from openapi_server.models.epp_svc_menu_type import EppSvcMenuType
from openapi_server import util

from openapi_server.models.epp_dcp_type import EppDcpType  # noqa: E501
from openapi_server.models.epp_svc_menu_type import EppSvcMenuType  # noqa: E501

class EppGreetingType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dcp=None, sv_date=None, sv_id=None, svc_menu=None):  # noqa: E501
        """EppGreetingType - a model defined in OpenAPI

        :param dcp: The dcp of this EppGreetingType.  # noqa: E501
        :type dcp: EppDcpType
        :param sv_date: The sv_date of this EppGreetingType.  # noqa: E501
        :type sv_date: datetime
        :param sv_id: The sv_id of this EppGreetingType.  # noqa: E501
        :type sv_id: str
        :param svc_menu: The svc_menu of this EppGreetingType.  # noqa: E501
        :type svc_menu: EppSvcMenuType
        """
        self.openapi_types = {
            'dcp': EppDcpType,
            'sv_date': datetime,
            'sv_id': str,
            'svc_menu': EppSvcMenuType
        }

        self.attribute_map = {
            'dcp': 'dcp',
            'sv_date': 'svDate',
            'sv_id': 'svID',
            'svc_menu': 'svcMenu'
        }

        self._dcp = dcp
        self._sv_date = sv_date
        self._sv_id = sv_id
        self._svc_menu = svc_menu

    @classmethod
    def from_dict(cls, dikt) -> 'EppGreetingType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The epp_greetingType of this EppGreetingType.  # noqa: E501
        :rtype: EppGreetingType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dcp(self) -> EppDcpType:
        """Gets the dcp of this EppGreetingType.


        :return: The dcp of this EppGreetingType.
        :rtype: EppDcpType
        """
        return self._dcp

    @dcp.setter
    def dcp(self, dcp: EppDcpType):
        """Sets the dcp of this EppGreetingType.


        :param dcp: The dcp of this EppGreetingType.
        :type dcp: EppDcpType
        """
        if dcp is None:
            raise ValueError("Invalid value for `dcp`, must not be `None`")  # noqa: E501

        self._dcp = dcp

    @property
    def sv_date(self) -> datetime:
        """Gets the sv_date of this EppGreetingType.


        :return: The sv_date of this EppGreetingType.
        :rtype: datetime
        """
        return self._sv_date

    @sv_date.setter
    def sv_date(self, sv_date: datetime):
        """Sets the sv_date of this EppGreetingType.


        :param sv_date: The sv_date of this EppGreetingType.
        :type sv_date: datetime
        """
        if sv_date is None:
            raise ValueError("Invalid value for `sv_date`, must not be `None`")  # noqa: E501

        self._sv_date = sv_date

    @property
    def sv_id(self) -> str:
        """Gets the sv_id of this EppGreetingType.


        :return: The sv_id of this EppGreetingType.
        :rtype: str
        """
        return self._sv_id

    @sv_id.setter
    def sv_id(self, sv_id: str):
        """Sets the sv_id of this EppGreetingType.


        :param sv_id: The sv_id of this EppGreetingType.
        :type sv_id: str
        """
        if sv_id is None:
            raise ValueError("Invalid value for `sv_id`, must not be `None`")  # noqa: E501
        if sv_id is not None and len(sv_id) > 64:
            raise ValueError("Invalid value for `sv_id`, length must be less than or equal to `64`")  # noqa: E501
        if sv_id is not None and len(sv_id) < 3:
            raise ValueError("Invalid value for `sv_id`, length must be greater than or equal to `3`")  # noqa: E501

        self._sv_id = sv_id

    @property
    def svc_menu(self) -> EppSvcMenuType:
        """Gets the svc_menu of this EppGreetingType.


        :return: The svc_menu of this EppGreetingType.
        :rtype: EppSvcMenuType
        """
        return self._svc_menu

    @svc_menu.setter
    def svc_menu(self, svc_menu: EppSvcMenuType):
        """Sets the svc_menu of this EppGreetingType.


        :param svc_menu: The svc_menu of this EppGreetingType.
        :type svc_menu: EppSvcMenuType
        """
        if svc_menu is None:
            raise ValueError("Invalid value for `svc_menu`, must not be `None`")  # noqa: E501

        self._svc_menu = svc_menu
