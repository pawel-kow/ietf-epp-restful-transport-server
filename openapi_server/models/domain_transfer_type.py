from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.domain_auth_info_type import DomainAuthInfoType
from openapi_server.models.domain_period_type import DomainPeriodType
from openapi_server import util

from openapi_server.models.domain_auth_info_type import DomainAuthInfoType  # noqa: E501
from openapi_server.models.domain_period_type import DomainPeriodType  # noqa: E501

class DomainTransferType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_info=None, name=None, period=None):  # noqa: E501
        """DomainTransferType - a model defined in OpenAPI

        :param auth_info: The auth_info of this DomainTransferType.  # noqa: E501
        :type auth_info: DomainAuthInfoType
        :param name: The name of this DomainTransferType.  # noqa: E501
        :type name: str
        :param period: The period of this DomainTransferType.  # noqa: E501
        :type period: DomainPeriodType
        """
        self.openapi_types = {
            'auth_info': DomainAuthInfoType,
            'name': str,
            'period': DomainPeriodType
        }

        self.attribute_map = {
            'auth_info': 'authInfo',
            'name': 'name',
            'period': 'period'
        }

        self._auth_info = auth_info
        self._name = name
        self._period = period

    @classmethod
    def from_dict(cls, dikt) -> 'DomainTransferType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The domain_transferType of this DomainTransferType.  # noqa: E501
        :rtype: DomainTransferType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_info(self) -> DomainAuthInfoType:
        """Gets the auth_info of this DomainTransferType.


        :return: The auth_info of this DomainTransferType.
        :rtype: DomainAuthInfoType
        """
        return self._auth_info

    @auth_info.setter
    def auth_info(self, auth_info: DomainAuthInfoType):
        """Sets the auth_info of this DomainTransferType.


        :param auth_info: The auth_info of this DomainTransferType.
        :type auth_info: DomainAuthInfoType
        """

        self._auth_info = auth_info

    @property
    def name(self) -> str:
        """Gets the name of this DomainTransferType.


        :return: The name of this DomainTransferType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DomainTransferType.


        :param name: The name of this DomainTransferType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def period(self) -> DomainPeriodType:
        """Gets the period of this DomainTransferType.


        :return: The period of this DomainTransferType.
        :rtype: DomainPeriodType
        """
        return self._period

    @period.setter
    def period(self, period: DomainPeriodType):
        """Sets the period of this DomainTransferType.


        :param period: The period of this DomainTransferType.
        :type period: DomainPeriodType
        """

        self._period = period
