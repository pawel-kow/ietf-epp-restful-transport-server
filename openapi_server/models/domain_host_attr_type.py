from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.host_addr_type import HostAddrType
from openapi_server import util

from openapi_server.models.host_addr_type import HostAddrType  # noqa: E501

class DomainHostAttrType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_addr=None, host_name=None):  # noqa: E501
        """DomainHostAttrType - a model defined in OpenAPI

        :param host_addr: The host_addr of this DomainHostAttrType.  # noqa: E501
        :type host_addr: List[HostAddrType]
        :param host_name: The host_name of this DomainHostAttrType.  # noqa: E501
        :type host_name: str
        """
        self.openapi_types = {
            'host_addr': List[HostAddrType],
            'host_name': str
        }

        self.attribute_map = {
            'host_addr': 'hostAddr',
            'host_name': 'hostName'
        }

        self._host_addr = host_addr
        self._host_name = host_name

    @classmethod
    def from_dict(cls, dikt) -> 'DomainHostAttrType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The domain_hostAttrType of this DomainHostAttrType.  # noqa: E501
        :rtype: DomainHostAttrType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_addr(self) -> List[HostAddrType]:
        """Gets the host_addr of this DomainHostAttrType.


        :return: The host_addr of this DomainHostAttrType.
        :rtype: List[HostAddrType]
        """
        return self._host_addr

    @host_addr.setter
    def host_addr(self, host_addr: List[HostAddrType]):
        """Sets the host_addr of this DomainHostAttrType.


        :param host_addr: The host_addr of this DomainHostAttrType.
        :type host_addr: List[HostAddrType]
        """
        if host_addr is not None and len(host_addr) < 0:
            raise ValueError("Invalid value for `host_addr`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._host_addr = host_addr

    @property
    def host_name(self) -> str:
        """Gets the host_name of this DomainHostAttrType.


        :return: The host_name of this DomainHostAttrType.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name: str):
        """Sets the host_name of this DomainHostAttrType.


        :param host_name: The host_name of this DomainHostAttrType.
        :type host_name: str
        """
        if host_name is None:
            raise ValueError("Invalid value for `host_name`, must not be `None`")  # noqa: E501
        if host_name is not None and len(host_name) > 255:
            raise ValueError("Invalid value for `host_name`, length must be less than or equal to `255`")  # noqa: E501
        if host_name is not None and len(host_name) < 1:
            raise ValueError("Invalid value for `host_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._host_name = host_name
