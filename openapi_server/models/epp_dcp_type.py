from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.epp_dcp_access_type import EppDcpAccessType
from openapi_server.models.epp_dcp_expiry_type import EppDcpExpiryType
from openapi_server.models.epp_dcp_statement_type import EppDcpStatementType
from openapi_server import util

from openapi_server.models.epp_dcp_access_type import EppDcpAccessType  # noqa: E501
from openapi_server.models.epp_dcp_expiry_type import EppDcpExpiryType  # noqa: E501
from openapi_server.models.epp_dcp_statement_type import EppDcpStatementType  # noqa: E501

class EppDcpType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access=None, expiry=None, statement=None):  # noqa: E501
        """EppDcpType - a model defined in OpenAPI

        :param access: The access of this EppDcpType.  # noqa: E501
        :type access: EppDcpAccessType
        :param expiry: The expiry of this EppDcpType.  # noqa: E501
        :type expiry: EppDcpExpiryType
        :param statement: The statement of this EppDcpType.  # noqa: E501
        :type statement: List[EppDcpStatementType]
        """
        self.openapi_types = {
            'access': EppDcpAccessType,
            'expiry': EppDcpExpiryType,
            'statement': List[EppDcpStatementType]
        }

        self.attribute_map = {
            'access': 'access',
            'expiry': 'expiry',
            'statement': 'statement'
        }

        self._access = access
        self._expiry = expiry
        self._statement = statement

    @classmethod
    def from_dict(cls, dikt) -> 'EppDcpType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The epp_dcpType of this EppDcpType.  # noqa: E501
        :rtype: EppDcpType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self) -> EppDcpAccessType:
        """Gets the access of this EppDcpType.


        :return: The access of this EppDcpType.
        :rtype: EppDcpAccessType
        """
        return self._access

    @access.setter
    def access(self, access: EppDcpAccessType):
        """Sets the access of this EppDcpType.


        :param access: The access of this EppDcpType.
        :type access: EppDcpAccessType
        """
        if access is None:
            raise ValueError("Invalid value for `access`, must not be `None`")  # noqa: E501

        self._access = access

    @property
    def expiry(self) -> EppDcpExpiryType:
        """Gets the expiry of this EppDcpType.


        :return: The expiry of this EppDcpType.
        :rtype: EppDcpExpiryType
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry: EppDcpExpiryType):
        """Sets the expiry of this EppDcpType.


        :param expiry: The expiry of this EppDcpType.
        :type expiry: EppDcpExpiryType
        """

        self._expiry = expiry

    @property
    def statement(self) -> List[EppDcpStatementType]:
        """Gets the statement of this EppDcpType.


        :return: The statement of this EppDcpType.
        :rtype: List[EppDcpStatementType]
        """
        return self._statement

    @statement.setter
    def statement(self, statement: List[EppDcpStatementType]):
        """Sets the statement of this EppDcpType.


        :param statement: The statement of this EppDcpType.
        :type statement: List[EppDcpStatementType]
        """
        if statement is not None and len(statement) < 1:
            raise ValueError("Invalid value for `statement`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._statement = statement
