from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class SecDNSKeyDataType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alg=None, flags=None, protocol=None, pub_key=None):  # noqa: E501
        """SecDNSKeyDataType - a model defined in OpenAPI

        :param alg: The alg of this SecDNSKeyDataType.  # noqa: E501
        :type alg: int
        :param flags: The flags of this SecDNSKeyDataType.  # noqa: E501
        :type flags: int
        :param protocol: The protocol of this SecDNSKeyDataType.  # noqa: E501
        :type protocol: int
        :param pub_key: The pub_key of this SecDNSKeyDataType.  # noqa: E501
        :type pub_key: str
        """
        self.openapi_types = {
            'alg': int,
            'flags': int,
            'protocol': int,
            'pub_key': str
        }

        self.attribute_map = {
            'alg': 'alg',
            'flags': 'flags',
            'protocol': 'protocol',
            'pub_key': 'pubKey'
        }

        self._alg = alg
        self._flags = flags
        self._protocol = protocol
        self._pub_key = pub_key

    @classmethod
    def from_dict(cls, dikt) -> 'SecDNSKeyDataType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The secDNS_keyDataType of this SecDNSKeyDataType.  # noqa: E501
        :rtype: SecDNSKeyDataType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alg(self) -> int:
        """Gets the alg of this SecDNSKeyDataType.


        :return: The alg of this SecDNSKeyDataType.
        :rtype: int
        """
        return self._alg

    @alg.setter
    def alg(self, alg: int):
        """Sets the alg of this SecDNSKeyDataType.


        :param alg: The alg of this SecDNSKeyDataType.
        :type alg: int
        """
        if alg is None:
            raise ValueError("Invalid value for `alg`, must not be `None`")  # noqa: E501

        self._alg = alg

    @property
    def flags(self) -> int:
        """Gets the flags of this SecDNSKeyDataType.


        :return: The flags of this SecDNSKeyDataType.
        :rtype: int
        """
        return self._flags

    @flags.setter
    def flags(self, flags: int):
        """Sets the flags of this SecDNSKeyDataType.


        :param flags: The flags of this SecDNSKeyDataType.
        :type flags: int
        """
        if flags is None:
            raise ValueError("Invalid value for `flags`, must not be `None`")  # noqa: E501

        self._flags = flags

    @property
    def protocol(self) -> int:
        """Gets the protocol of this SecDNSKeyDataType.


        :return: The protocol of this SecDNSKeyDataType.
        :rtype: int
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: int):
        """Sets the protocol of this SecDNSKeyDataType.


        :param protocol: The protocol of this SecDNSKeyDataType.
        :type protocol: int
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def pub_key(self) -> str:
        """Gets the pub_key of this SecDNSKeyDataType.


        :return: The pub_key of this SecDNSKeyDataType.
        :rtype: str
        """
        return self._pub_key

    @pub_key.setter
    def pub_key(self, pub_key: str):
        """Sets the pub_key of this SecDNSKeyDataType.


        :param pub_key: The pub_key of this SecDNSKeyDataType.
        :type pub_key: str
        """
        if pub_key is None:
            raise ValueError("Invalid value for `pub_key`, must not be `None`")  # noqa: E501
        if pub_key is not None and len(pub_key) < 1:
            raise ValueError("Invalid value for `pub_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._pub_key = pub_key
