from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.domain_create_request_all_of_command_extension import DomainCreateRequestAllOfCommandExtension
from openapi_server.models.domain_create_type import DomainCreateType
from openapi_server import util

from openapi_server.models.domain_create_request_all_of_command_extension import DomainCreateRequestAllOfCommandExtension  # noqa: E501
from openapi_server.models.domain_create_type import DomainCreateType  # noqa: E501

class DomainCreateRequestAllOfCommand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create=None, extension=None):  # noqa: E501
        """DomainCreateRequestAllOfCommand - a model defined in OpenAPI

        :param create: The create of this DomainCreateRequestAllOfCommand.  # noqa: E501
        :type create: DomainCreateType
        :param extension: The extension of this DomainCreateRequestAllOfCommand.  # noqa: E501
        :type extension: DomainCreateRequestAllOfCommandExtension
        """
        self.openapi_types = {
            'create': DomainCreateType,
            'extension': DomainCreateRequestAllOfCommandExtension
        }

        self.attribute_map = {
            'create': 'create',
            'extension': 'extension'
        }

        self._create = create
        self._extension = extension

    @classmethod
    def from_dict(cls, dikt) -> 'DomainCreateRequestAllOfCommand':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DomainCreateRequest_allOf_command of this DomainCreateRequestAllOfCommand.  # noqa: E501
        :rtype: DomainCreateRequestAllOfCommand
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create(self) -> DomainCreateType:
        """Gets the create of this DomainCreateRequestAllOfCommand.


        :return: The create of this DomainCreateRequestAllOfCommand.
        :rtype: DomainCreateType
        """
        return self._create

    @create.setter
    def create(self, create: DomainCreateType):
        """Sets the create of this DomainCreateRequestAllOfCommand.


        :param create: The create of this DomainCreateRequestAllOfCommand.
        :type create: DomainCreateType
        """
        if create is None:
            raise ValueError("Invalid value for `create`, must not be `None`")  # noqa: E501

        self._create = create

    @property
    def extension(self) -> DomainCreateRequestAllOfCommandExtension:
        """Gets the extension of this DomainCreateRequestAllOfCommand.


        :return: The extension of this DomainCreateRequestAllOfCommand.
        :rtype: DomainCreateRequestAllOfCommandExtension
        """
        return self._extension

    @extension.setter
    def extension(self, extension: DomainCreateRequestAllOfCommandExtension):
        """Sets the extension of this DomainCreateRequestAllOfCommand.


        :param extension: The extension of this DomainCreateRequestAllOfCommand.
        :type extension: DomainCreateRequestAllOfCommandExtension
        """

        self._extension = extension
