from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.epp_command_type import EppCommandType
from openapi_server import util

from openapi_server.models.epp_command_type import EppCommandType  # noqa: E501

class EppEppTypeOneOf2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command=None):  # noqa: E501
        """EppEppTypeOneOf2 - a model defined in OpenAPI

        :param command: The command of this EppEppTypeOneOf2.  # noqa: E501
        :type command: EppCommandType
        """
        self.openapi_types = {
            'command': EppCommandType
        }

        self.attribute_map = {
            'command': 'command'
        }

        self._command = command

    @classmethod
    def from_dict(cls, dikt) -> 'EppEppTypeOneOf2':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The epp_eppType_oneOf_2 of this EppEppTypeOneOf2.  # noqa: E501
        :rtype: EppEppTypeOneOf2
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self) -> EppCommandType:
        """Gets the command of this EppEppTypeOneOf2.


        :return: The command of this EppEppTypeOneOf2.
        :rtype: EppCommandType
        """
        return self._command

    @command.setter
    def command(self, command: EppCommandType):
        """Sets the command of this EppEppTypeOneOf2.


        :param command: The command of this EppEppTypeOneOf2.
        :type command: EppCommandType
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")  # noqa: E501

        self._command = command
