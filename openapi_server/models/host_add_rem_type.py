from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.host_addr_type import HostAddrType
from openapi_server.models.host_status_type import HostStatusType
from openapi_server import util

from openapi_server.models.host_addr_type import HostAddrType  # noqa: E501
from openapi_server.models.host_status_type import HostStatusType  # noqa: E501

class HostAddRemType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addr=None, status=None):  # noqa: E501
        """HostAddRemType - a model defined in OpenAPI

        :param addr: The addr of this HostAddRemType.  # noqa: E501
        :type addr: List[HostAddrType]
        :param status: The status of this HostAddRemType.  # noqa: E501
        :type status: List[HostStatusType]
        """
        self.openapi_types = {
            'addr': List[HostAddrType],
            'status': List[HostStatusType]
        }

        self.attribute_map = {
            'addr': 'addr',
            'status': 'status'
        }

        self._addr = addr
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'HostAddRemType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The host_addRemType of this HostAddRemType.  # noqa: E501
        :rtype: HostAddRemType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addr(self) -> List[HostAddrType]:
        """Gets the addr of this HostAddRemType.


        :return: The addr of this HostAddRemType.
        :rtype: List[HostAddrType]
        """
        return self._addr

    @addr.setter
    def addr(self, addr: List[HostAddrType]):
        """Sets the addr of this HostAddRemType.


        :param addr: The addr of this HostAddRemType.
        :type addr: List[HostAddrType]
        """
        if addr is not None and len(addr) < 0:
            raise ValueError("Invalid value for `addr`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._addr = addr

    @property
    def status(self) -> List[HostStatusType]:
        """Gets the status of this HostAddRemType.


        :return: The status of this HostAddRemType.
        :rtype: List[HostStatusType]
        """
        return self._status

    @status.setter
    def status(self, status: List[HostStatusType]):
        """Sets the status of this HostAddRemType.


        :param status: The status of this HostAddRemType.
        :type status: List[HostStatusType]
        """
        if status is not None and len(status) > 7:
            raise ValueError("Invalid value for `status`, number of items must be less than or equal to `7`")  # noqa: E501
        if status is not None and len(status) < 0:
            raise ValueError("Invalid value for `status`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._status = status
