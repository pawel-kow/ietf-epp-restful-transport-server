from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.epp_dcp_access_type_one_of1 import EppDcpAccessTypeOneOf1
from openapi_server.models.epp_dcp_retention_type_one_of import EppDcpRetentionTypeOneOf
from openapi_server.models.epp_dcp_retention_type_one_of1 import EppDcpRetentionTypeOneOf1
from openapi_server.models.epp_dcp_retention_type_one_of2 import EppDcpRetentionTypeOneOf2
from openapi_server.models.epp_dcp_retention_type_one_of3 import EppDcpRetentionTypeOneOf3
from openapi_server import util

from openapi_server.models.epp_dcp_access_type_one_of1 import EppDcpAccessTypeOneOf1  # noqa: E501
from openapi_server.models.epp_dcp_retention_type_one_of import EppDcpRetentionTypeOneOf  # noqa: E501
from openapi_server.models.epp_dcp_retention_type_one_of1 import EppDcpRetentionTypeOneOf1  # noqa: E501
from openapi_server.models.epp_dcp_retention_type_one_of2 import EppDcpRetentionTypeOneOf2  # noqa: E501
from openapi_server.models.epp_dcp_retention_type_one_of3 import EppDcpRetentionTypeOneOf3  # noqa: E501

class EppDcpRetentionType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business=False, indefinite=False, legal=False, _none=False, stated=False):  # noqa: E501
        """EppDcpRetentionType - a model defined in OpenAPI

        :param business: The business of this EppDcpRetentionType.  # noqa: E501
        :type business: bool
        :param indefinite: The indefinite of this EppDcpRetentionType.  # noqa: E501
        :type indefinite: bool
        :param legal: The legal of this EppDcpRetentionType.  # noqa: E501
        :type legal: bool
        :param _none: The _none of this EppDcpRetentionType.  # noqa: E501
        :type _none: bool
        :param stated: The stated of this EppDcpRetentionType.  # noqa: E501
        :type stated: bool
        """
        self.openapi_types = {
            'business': bool,
            'indefinite': bool,
            'legal': bool,
            '_none': bool,
            'stated': bool
        }

        self.attribute_map = {
            'business': 'business',
            'indefinite': 'indefinite',
            'legal': 'legal',
            '_none': 'none',
            'stated': 'stated'
        }

        self._business = business
        self._indefinite = indefinite
        self._legal = legal
        self.__none = _none
        self._stated = stated

    @classmethod
    def from_dict(cls, dikt) -> 'EppDcpRetentionType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The epp_dcpRetentionType of this EppDcpRetentionType.  # noqa: E501
        :rtype: EppDcpRetentionType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business(self) -> bool:
        """Gets the business of this EppDcpRetentionType.


        :return: The business of this EppDcpRetentionType.
        :rtype: bool
        """
        return self._business

    @business.setter
    def business(self, business: bool):
        """Sets the business of this EppDcpRetentionType.


        :param business: The business of this EppDcpRetentionType.
        :type business: bool
        """
        if business is None:
            raise ValueError("Invalid value for `business`, must not be `None`")  # noqa: E501

        self._business = business

    @property
    def indefinite(self) -> bool:
        """Gets the indefinite of this EppDcpRetentionType.


        :return: The indefinite of this EppDcpRetentionType.
        :rtype: bool
        """
        return self._indefinite

    @indefinite.setter
    def indefinite(self, indefinite: bool):
        """Sets the indefinite of this EppDcpRetentionType.


        :param indefinite: The indefinite of this EppDcpRetentionType.
        :type indefinite: bool
        """
        if indefinite is None:
            raise ValueError("Invalid value for `indefinite`, must not be `None`")  # noqa: E501

        self._indefinite = indefinite

    @property
    def legal(self) -> bool:
        """Gets the legal of this EppDcpRetentionType.


        :return: The legal of this EppDcpRetentionType.
        :rtype: bool
        """
        return self._legal

    @legal.setter
    def legal(self, legal: bool):
        """Sets the legal of this EppDcpRetentionType.


        :param legal: The legal of this EppDcpRetentionType.
        :type legal: bool
        """
        if legal is None:
            raise ValueError("Invalid value for `legal`, must not be `None`")  # noqa: E501

        self._legal = legal

    @property
    def _none(self) -> bool:
        """Gets the _none of this EppDcpRetentionType.


        :return: The _none of this EppDcpRetentionType.
        :rtype: bool
        """
        return self.__none

    @_none.setter
    def _none(self, _none: bool):
        """Sets the _none of this EppDcpRetentionType.


        :param _none: The _none of this EppDcpRetentionType.
        :type _none: bool
        """
        if _none is None:
            raise ValueError("Invalid value for `_none`, must not be `None`")  # noqa: E501

        self.__none = _none

    @property
    def stated(self) -> bool:
        """Gets the stated of this EppDcpRetentionType.


        :return: The stated of this EppDcpRetentionType.
        :rtype: bool
        """
        return self._stated

    @stated.setter
    def stated(self, stated: bool):
        """Sets the stated of this EppDcpRetentionType.


        :param stated: The stated of this EppDcpRetentionType.
        :type stated: bool
        """
        if stated is None:
            raise ValueError("Invalid value for `stated`, must not be `None`")  # noqa: E501

        self._stated = stated
