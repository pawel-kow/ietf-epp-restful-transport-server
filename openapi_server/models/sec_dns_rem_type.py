from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.sec_dnsds_data_type import SecDNSDsDataType
from openapi_server.models.sec_dns_key_data_type import SecDNSKeyDataType
from openapi_server.models.sec_dns_rem_type_one_of import SecDNSRemTypeOneOf
from openapi_server.models.sec_dns_rem_type_one_of1 import SecDNSRemTypeOneOf1
from openapi_server.models.sec_dns_rem_type_one_of2 import SecDNSRemTypeOneOf2
from openapi_server import util

from openapi_server.models.sec_dns_key_data_type import SecDNSKeyDataType  # noqa: E501
from openapi_server.models.sec_dns_rem_type_one_of import SecDNSRemTypeOneOf  # noqa: E501
from openapi_server.models.sec_dns_rem_type_one_of1 import SecDNSRemTypeOneOf1  # noqa: E501
from openapi_server.models.sec_dns_rem_type_one_of2 import SecDNSRemTypeOneOf2  # noqa: E501
from openapi_server.models.sec_dnsds_data_type import SecDNSDsDataType  # noqa: E501

class SecDNSRemType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all=None, ds_data=None, key_data=None):  # noqa: E501
        """SecDNSRemType - a model defined in OpenAPI

        :param all: The all of this SecDNSRemType.  # noqa: E501
        :type all: bool
        :param ds_data: The ds_data of this SecDNSRemType.  # noqa: E501
        :type ds_data: List[SecDNSDsDataType]
        :param key_data: The key_data of this SecDNSRemType.  # noqa: E501
        :type key_data: List[SecDNSKeyDataType]
        """
        self.openapi_types = {
            'all': bool,
            'ds_data': List[SecDNSDsDataType],
            'key_data': List[SecDNSKeyDataType]
        }

        self.attribute_map = {
            'all': 'all',
            'ds_data': 'dsData',
            'key_data': 'keyData'
        }

        self._all = all
        self._ds_data = ds_data
        self._key_data = key_data

    @classmethod
    def from_dict(cls, dikt) -> 'SecDNSRemType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The secDNS_remType of this SecDNSRemType.  # noqa: E501
        :rtype: SecDNSRemType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all(self) -> bool:
        """Gets the all of this SecDNSRemType.


        :return: The all of this SecDNSRemType.
        :rtype: bool
        """
        return self._all

    @all.setter
    def all(self, all: bool):
        """Sets the all of this SecDNSRemType.


        :param all: The all of this SecDNSRemType.
        :type all: bool
        """
        if all is None:
            raise ValueError("Invalid value for `all`, must not be `None`")  # noqa: E501

        self._all = all

    @property
    def ds_data(self) -> List[SecDNSDsDataType]:
        """Gets the ds_data of this SecDNSRemType.


        :return: The ds_data of this SecDNSRemType.
        :rtype: List[SecDNSDsDataType]
        """
        return self._ds_data

    @ds_data.setter
    def ds_data(self, ds_data: List[SecDNSDsDataType]):
        """Sets the ds_data of this SecDNSRemType.


        :param ds_data: The ds_data of this SecDNSRemType.
        :type ds_data: List[SecDNSDsDataType]
        """
        if ds_data is None:
            raise ValueError("Invalid value for `ds_data`, must not be `None`")  # noqa: E501
        if ds_data is not None and len(ds_data) < 1:
            raise ValueError("Invalid value for `ds_data`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ds_data = ds_data

    @property
    def key_data(self) -> List[SecDNSKeyDataType]:
        """Gets the key_data of this SecDNSRemType.


        :return: The key_data of this SecDNSRemType.
        :rtype: List[SecDNSKeyDataType]
        """
        return self._key_data

    @key_data.setter
    def key_data(self, key_data: List[SecDNSKeyDataType]):
        """Sets the key_data of this SecDNSRemType.


        :param key_data: The key_data of this SecDNSRemType.
        :type key_data: List[SecDNSKeyDataType]
        """
        if key_data is None:
            raise ValueError("Invalid value for `key_data`, must not be `None`")  # noqa: E501
        if key_data is not None and len(key_data) < 1:
            raise ValueError("Invalid value for `key_data`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._key_data = key_data
