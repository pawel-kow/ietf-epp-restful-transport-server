from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.domain_contact_type import DomainContactType
from openapi_server.models.domain_ns_type import DomainNsType
from openapi_server.models.domain_status_type import DomainStatusType
from openapi_server import util

from openapi_server.models.domain_contact_type import DomainContactType  # noqa: E501
from openapi_server.models.domain_ns_type import DomainNsType  # noqa: E501
from openapi_server.models.domain_status_type import DomainStatusType  # noqa: E501

class DomainAddRemType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact=None, ns=None, status=None):  # noqa: E501
        """DomainAddRemType - a model defined in OpenAPI

        :param contact: The contact of this DomainAddRemType.  # noqa: E501
        :type contact: List[DomainContactType]
        :param ns: The ns of this DomainAddRemType.  # noqa: E501
        :type ns: DomainNsType
        :param status: The status of this DomainAddRemType.  # noqa: E501
        :type status: List[DomainStatusType]
        """
        self.openapi_types = {
            'contact': List[DomainContactType],
            'ns': DomainNsType,
            'status': List[DomainStatusType]
        }

        self.attribute_map = {
            'contact': 'contact',
            'ns': 'ns',
            'status': 'status'
        }

        self._contact = contact
        self._ns = ns
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'DomainAddRemType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The domain_addRemType of this DomainAddRemType.  # noqa: E501
        :rtype: DomainAddRemType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact(self) -> List[DomainContactType]:
        """Gets the contact of this DomainAddRemType.


        :return: The contact of this DomainAddRemType.
        :rtype: List[DomainContactType]
        """
        return self._contact

    @contact.setter
    def contact(self, contact: List[DomainContactType]):
        """Sets the contact of this DomainAddRemType.


        :param contact: The contact of this DomainAddRemType.
        :type contact: List[DomainContactType]
        """
        if contact is not None and len(contact) < 0:
            raise ValueError("Invalid value for `contact`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._contact = contact

    @property
    def ns(self) -> DomainNsType:
        """Gets the ns of this DomainAddRemType.


        :return: The ns of this DomainAddRemType.
        :rtype: DomainNsType
        """
        return self._ns

    @ns.setter
    def ns(self, ns: DomainNsType):
        """Sets the ns of this DomainAddRemType.


        :param ns: The ns of this DomainAddRemType.
        :type ns: DomainNsType
        """

        self._ns = ns

    @property
    def status(self) -> List[DomainStatusType]:
        """Gets the status of this DomainAddRemType.


        :return: The status of this DomainAddRemType.
        :rtype: List[DomainStatusType]
        """
        return self._status

    @status.setter
    def status(self, status: List[DomainStatusType]):
        """Sets the status of this DomainAddRemType.


        :param status: The status of this DomainAddRemType.
        :type status: List[DomainStatusType]
        """
        if status is not None and len(status) > 11:
            raise ValueError("Invalid value for `status`, number of items must be less than or equal to `11`")  # noqa: E501
        if status is not None and len(status) < 0:
            raise ValueError("Invalid value for `status`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._status = status
