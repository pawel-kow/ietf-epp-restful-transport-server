from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.domain_auth_info_chg_type_one_of2 import DomainAuthInfoChgTypeOneOf2
from openapi_server.models.epp_dcp_access_type_one_of import EppDcpAccessTypeOneOf
from openapi_server.models.epp_dcp_access_type_one_of1 import EppDcpAccessTypeOneOf1
from openapi_server.models.epp_dcp_access_type_one_of2 import EppDcpAccessTypeOneOf2
from openapi_server.models.epp_dcp_access_type_one_of3 import EppDcpAccessTypeOneOf3
from openapi_server.models.epp_dcp_access_type_one_of4 import EppDcpAccessTypeOneOf4
from openapi_server import util

from openapi_server.models.domain_auth_info_chg_type_one_of2 import DomainAuthInfoChgTypeOneOf2  # noqa: E501
from openapi_server.models.epp_dcp_access_type_one_of import EppDcpAccessTypeOneOf  # noqa: E501
from openapi_server.models.epp_dcp_access_type_one_of1 import EppDcpAccessTypeOneOf1  # noqa: E501
from openapi_server.models.epp_dcp_access_type_one_of2 import EppDcpAccessTypeOneOf2  # noqa: E501
from openapi_server.models.epp_dcp_access_type_one_of3 import EppDcpAccessTypeOneOf3  # noqa: E501
from openapi_server.models.epp_dcp_access_type_one_of4 import EppDcpAccessTypeOneOf4  # noqa: E501

class EppDcpAccessType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all=False, _none=False, null=False, other=False, personal=False, personal_and_other=False):  # noqa: E501
        """EppDcpAccessType - a model defined in OpenAPI

        :param all: The all of this EppDcpAccessType.  # noqa: E501
        :type all: bool
        :param _none: The _none of this EppDcpAccessType.  # noqa: E501
        :type _none: bool
        :param null: The null of this EppDcpAccessType.  # noqa: E501
        :type null: bool
        :param other: The other of this EppDcpAccessType.  # noqa: E501
        :type other: bool
        :param personal: The personal of this EppDcpAccessType.  # noqa: E501
        :type personal: bool
        :param personal_and_other: The personal_and_other of this EppDcpAccessType.  # noqa: E501
        :type personal_and_other: bool
        """
        self.openapi_types = {
            'all': bool,
            '_none': bool,
            'null': bool,
            'other': bool,
            'personal': bool,
            'personal_and_other': bool
        }

        self.attribute_map = {
            'all': 'all',
            '_none': 'none',
            'null': 'null',
            'other': 'other',
            'personal': 'personal',
            'personal_and_other': 'personalAndOther'
        }

        self._all = all
        self.__none = _none
        self._null = null
        self._other = other
        self._personal = personal
        self._personal_and_other = personal_and_other

    @classmethod
    def from_dict(cls, dikt) -> 'EppDcpAccessType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The epp_dcpAccessType of this EppDcpAccessType.  # noqa: E501
        :rtype: EppDcpAccessType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all(self) -> bool:
        """Gets the all of this EppDcpAccessType.


        :return: The all of this EppDcpAccessType.
        :rtype: bool
        """
        return self._all

    @all.setter
    def all(self, all: bool):
        """Sets the all of this EppDcpAccessType.


        :param all: The all of this EppDcpAccessType.
        :type all: bool
        """
        if all is None:
            raise ValueError("Invalid value for `all`, must not be `None`")  # noqa: E501

        self._all = all

    @property
    def _none(self) -> bool:
        """Gets the _none of this EppDcpAccessType.


        :return: The _none of this EppDcpAccessType.
        :rtype: bool
        """
        return self.__none

    @_none.setter
    def _none(self, _none: bool):
        """Sets the _none of this EppDcpAccessType.


        :param _none: The _none of this EppDcpAccessType.
        :type _none: bool
        """
        if _none is None:
            raise ValueError("Invalid value for `_none`, must not be `None`")  # noqa: E501

        self.__none = _none

    @property
    def null(self) -> bool:
        """Gets the null of this EppDcpAccessType.


        :return: The null of this EppDcpAccessType.
        :rtype: bool
        """
        return self._null

    @null.setter
    def null(self, null: bool):
        """Sets the null of this EppDcpAccessType.


        :param null: The null of this EppDcpAccessType.
        :type null: bool
        """
        if null is None:
            raise ValueError("Invalid value for `null`, must not be `None`")  # noqa: E501

        self._null = null

    @property
    def other(self) -> bool:
        """Gets the other of this EppDcpAccessType.


        :return: The other of this EppDcpAccessType.
        :rtype: bool
        """
        return self._other

    @other.setter
    def other(self, other: bool):
        """Sets the other of this EppDcpAccessType.


        :param other: The other of this EppDcpAccessType.
        :type other: bool
        """
        if other is None:
            raise ValueError("Invalid value for `other`, must not be `None`")  # noqa: E501

        self._other = other

    @property
    def personal(self) -> bool:
        """Gets the personal of this EppDcpAccessType.


        :return: The personal of this EppDcpAccessType.
        :rtype: bool
        """
        return self._personal

    @personal.setter
    def personal(self, personal: bool):
        """Sets the personal of this EppDcpAccessType.


        :param personal: The personal of this EppDcpAccessType.
        :type personal: bool
        """
        if personal is None:
            raise ValueError("Invalid value for `personal`, must not be `None`")  # noqa: E501

        self._personal = personal

    @property
    def personal_and_other(self) -> bool:
        """Gets the personal_and_other of this EppDcpAccessType.


        :return: The personal_and_other of this EppDcpAccessType.
        :rtype: bool
        """
        return self._personal_and_other

    @personal_and_other.setter
    def personal_and_other(self, personal_and_other: bool):
        """Sets the personal_and_other of this EppDcpAccessType.


        :param personal_and_other: The personal_and_other of this EppDcpAccessType.
        :type personal_and_other: bool
        """
        if personal_and_other is None:
            raise ValueError("Invalid value for `personal_and_other`, must not be `None`")  # noqa: E501

        self._personal_and_other = personal_and_other
