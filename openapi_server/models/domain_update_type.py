from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.domain_add_rem_type import DomainAddRemType
from openapi_server.models.domain_chg_type import DomainChgType
from openapi_server import util

from openapi_server.models.domain_add_rem_type import DomainAddRemType  # noqa: E501
from openapi_server.models.domain_chg_type import DomainChgType  # noqa: E501

class DomainUpdateType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add=None, chg=None, name=None, rem=None):  # noqa: E501
        """DomainUpdateType - a model defined in OpenAPI

        :param add: The add of this DomainUpdateType.  # noqa: E501
        :type add: DomainAddRemType
        :param chg: The chg of this DomainUpdateType.  # noqa: E501
        :type chg: DomainChgType
        :param name: The name of this DomainUpdateType.  # noqa: E501
        :type name: str
        :param rem: The rem of this DomainUpdateType.  # noqa: E501
        :type rem: DomainAddRemType
        """
        self.openapi_types = {
            'add': DomainAddRemType,
            'chg': DomainChgType,
            'name': str,
            'rem': DomainAddRemType
        }

        self.attribute_map = {
            'add': 'add',
            'chg': 'chg',
            'name': 'name',
            'rem': 'rem'
        }

        self._add = add
        self._chg = chg
        self._name = name
        self._rem = rem

    @classmethod
    def from_dict(cls, dikt) -> 'DomainUpdateType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The domain_updateType of this DomainUpdateType.  # noqa: E501
        :rtype: DomainUpdateType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add(self) -> DomainAddRemType:
        """Gets the add of this DomainUpdateType.


        :return: The add of this DomainUpdateType.
        :rtype: DomainAddRemType
        """
        return self._add

    @add.setter
    def add(self, add: DomainAddRemType):
        """Sets the add of this DomainUpdateType.


        :param add: The add of this DomainUpdateType.
        :type add: DomainAddRemType
        """

        self._add = add

    @property
    def chg(self) -> DomainChgType:
        """Gets the chg of this DomainUpdateType.


        :return: The chg of this DomainUpdateType.
        :rtype: DomainChgType
        """
        return self._chg

    @chg.setter
    def chg(self, chg: DomainChgType):
        """Sets the chg of this DomainUpdateType.


        :param chg: The chg of this DomainUpdateType.
        :type chg: DomainChgType
        """

        self._chg = chg

    @property
    def name(self) -> str:
        """Gets the name of this DomainUpdateType.


        :return: The name of this DomainUpdateType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DomainUpdateType.


        :param name: The name of this DomainUpdateType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def rem(self) -> DomainAddRemType:
        """Gets the rem of this DomainUpdateType.


        :return: The rem of this DomainUpdateType.
        :rtype: DomainAddRemType
        """
        return self._rem

    @rem.setter
    def rem(self, rem: DomainAddRemType):
        """Sets the rem of this DomainUpdateType.


        :param rem: The rem of this DomainUpdateType.
        :type rem: DomainAddRemType
        """

        self._rem = rem
