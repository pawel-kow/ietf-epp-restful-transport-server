from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.epp_dcp_expiry_type_one_of import EppDcpExpiryTypeOneOf
from openapi_server.models.epp_dcp_expiry_type_one_of1 import EppDcpExpiryTypeOneOf1
from openapi_server import util

from openapi_server.models.epp_dcp_expiry_type_one_of import EppDcpExpiryTypeOneOf  # noqa: E501
from openapi_server.models.epp_dcp_expiry_type_one_of1 import EppDcpExpiryTypeOneOf1  # noqa: E501

class EppDcpExpiryType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absolute=None, relative=None):  # noqa: E501
        """EppDcpExpiryType - a model defined in OpenAPI

        :param absolute: The absolute of this EppDcpExpiryType.  # noqa: E501
        :type absolute: datetime
        :param relative: The relative of this EppDcpExpiryType.  # noqa: E501
        :type relative: str
        """
        self.openapi_types = {
            'absolute': datetime,
            'relative': str
        }

        self.attribute_map = {
            'absolute': 'absolute',
            'relative': 'relative'
        }

        self._absolute = absolute
        self._relative = relative

    @classmethod
    def from_dict(cls, dikt) -> 'EppDcpExpiryType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The epp_dcpExpiryType of this EppDcpExpiryType.  # noqa: E501
        :rtype: EppDcpExpiryType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absolute(self) -> datetime:
        """Gets the absolute of this EppDcpExpiryType.


        :return: The absolute of this EppDcpExpiryType.
        :rtype: datetime
        """
        return self._absolute

    @absolute.setter
    def absolute(self, absolute: datetime):
        """Sets the absolute of this EppDcpExpiryType.


        :param absolute: The absolute of this EppDcpExpiryType.
        :type absolute: datetime
        """
        if absolute is None:
            raise ValueError("Invalid value for `absolute`, must not be `None`")  # noqa: E501

        self._absolute = absolute

    @property
    def relative(self) -> str:
        """Gets the relative of this EppDcpExpiryType.


        :return: The relative of this EppDcpExpiryType.
        :rtype: str
        """
        return self._relative

    @relative.setter
    def relative(self, relative: str):
        """Sets the relative of this EppDcpExpiryType.


        :param relative: The relative of this EppDcpExpiryType.
        :type relative: str
        """
        if relative is None:
            raise ValueError("Invalid value for `relative`, must not be `None`")  # noqa: E501

        self._relative = relative
