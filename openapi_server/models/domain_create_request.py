from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.domain_create_request_all_of_command import DomainCreateRequestAllOfCommand
from openapi_server.models.epp_ext_any_type import EppExtAnyType
from openapi_server.models.epp_greeting_type import EppGreetingType
from openapi_server.models.epp_response_type import EppResponseType
from openapi_server import util

from openapi_server.models.domain_create_request_all_of_command import DomainCreateRequestAllOfCommand  # noqa: E501
from openapi_server.models.epp_ext_any_type import EppExtAnyType  # noqa: E501
from openapi_server.models.epp_greeting_type import EppGreetingType  # noqa: E501
from openapi_server.models.epp_response_type import EppResponseType  # noqa: E501

class DomainCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, greeting=None, hello=False, command=None, response=None, extension=None):  # noqa: E501
        """DomainCreateRequest - a model defined in OpenAPI

        :param greeting: The greeting of this DomainCreateRequest.  # noqa: E501
        :type greeting: EppGreetingType
        :param hello: The hello of this DomainCreateRequest.  # noqa: E501
        :type hello: bool
        :param command: The command of this DomainCreateRequest.  # noqa: E501
        :type command: DomainCreateRequestAllOfCommand
        :param response: The response of this DomainCreateRequest.  # noqa: E501
        :type response: EppResponseType
        :param extension: The extension of this DomainCreateRequest.  # noqa: E501
        :type extension: EppExtAnyType
        """
        self.openapi_types = {
            'greeting': EppGreetingType,
            'hello': bool,
            'command': DomainCreateRequestAllOfCommand,
            'response': EppResponseType,
            'extension': EppExtAnyType
        }

        self.attribute_map = {
            'greeting': 'greeting',
            'hello': 'hello',
            'command': 'command',
            'response': 'response',
            'extension': 'extension'
        }

        self._greeting = greeting
        self._hello = hello
        self._command = command
        self._response = response
        self._extension = extension

    @classmethod
    def from_dict(cls, dikt) -> 'DomainCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DomainCreateRequest of this DomainCreateRequest.  # noqa: E501
        :rtype: DomainCreateRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def greeting(self) -> EppGreetingType:
        """Gets the greeting of this DomainCreateRequest.


        :return: The greeting of this DomainCreateRequest.
        :rtype: EppGreetingType
        """
        return self._greeting

    @greeting.setter
    def greeting(self, greeting: EppGreetingType):
        """Sets the greeting of this DomainCreateRequest.


        :param greeting: The greeting of this DomainCreateRequest.
        :type greeting: EppGreetingType
        """
        if greeting is None:
            raise ValueError("Invalid value for `greeting`, must not be `None`")  # noqa: E501

        self._greeting = greeting

    @property
    def hello(self) -> bool:
        """Gets the hello of this DomainCreateRequest.


        :return: The hello of this DomainCreateRequest.
        :rtype: bool
        """
        return self._hello

    @hello.setter
    def hello(self, hello: bool):
        """Sets the hello of this DomainCreateRequest.


        :param hello: The hello of this DomainCreateRequest.
        :type hello: bool
        """
        if hello is None:
            raise ValueError("Invalid value for `hello`, must not be `None`")  # noqa: E501

        self._hello = hello

    @property
    def command(self) -> DomainCreateRequestAllOfCommand:
        """Gets the command of this DomainCreateRequest.


        :return: The command of this DomainCreateRequest.
        :rtype: DomainCreateRequestAllOfCommand
        """
        return self._command

    @command.setter
    def command(self, command: DomainCreateRequestAllOfCommand):
        """Sets the command of this DomainCreateRequest.


        :param command: The command of this DomainCreateRequest.
        :type command: DomainCreateRequestAllOfCommand
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")  # noqa: E501

        self._command = command

    @property
    def response(self) -> EppResponseType:
        """Gets the response of this DomainCreateRequest.


        :return: The response of this DomainCreateRequest.
        :rtype: EppResponseType
        """
        return self._response

    @response.setter
    def response(self, response: EppResponseType):
        """Sets the response of this DomainCreateRequest.


        :param response: The response of this DomainCreateRequest.
        :type response: EppResponseType
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")  # noqa: E501

        self._response = response

    @property
    def extension(self) -> EppExtAnyType:
        """Gets the extension of this DomainCreateRequest.


        :return: The extension of this DomainCreateRequest.
        :rtype: EppExtAnyType
        """
        return self._extension

    @extension.setter
    def extension(self, extension: EppExtAnyType):
        """Sets the extension of this DomainCreateRequest.


        :param extension: The extension of this DomainCreateRequest.
        :type extension: EppExtAnyType
        """
        if extension is None:
            raise ValueError("Invalid value for `extension`, must not be `None`")  # noqa: E501

        self._extension = extension
