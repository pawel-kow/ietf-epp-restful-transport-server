from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.epp_err_value_type import EppErrValueType
from openapi_server.models.epp_msg_type import EppMsgType
from openapi_server import util

from openapi_server.models.epp_err_value_type import EppErrValueType  # noqa: E501
from openapi_server.models.epp_msg_type import EppMsgType  # noqa: E501

class EppExtErrValueType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reason=None, value=None):  # noqa: E501
        """EppExtErrValueType - a model defined in OpenAPI

        :param reason: The reason of this EppExtErrValueType.  # noqa: E501
        :type reason: EppMsgType
        :param value: The value of this EppExtErrValueType.  # noqa: E501
        :type value: EppErrValueType
        """
        self.openapi_types = {
            'reason': EppMsgType,
            'value': EppErrValueType
        }

        self.attribute_map = {
            'reason': 'reason',
            'value': 'value'
        }

        self._reason = reason
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'EppExtErrValueType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The epp_extErrValueType of this EppExtErrValueType.  # noqa: E501
        :rtype: EppExtErrValueType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reason(self) -> EppMsgType:
        """Gets the reason of this EppExtErrValueType.


        :return: The reason of this EppExtErrValueType.
        :rtype: EppMsgType
        """
        return self._reason

    @reason.setter
    def reason(self, reason: EppMsgType):
        """Sets the reason of this EppExtErrValueType.


        :param reason: The reason of this EppExtErrValueType.
        :type reason: EppMsgType
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    @property
    def value(self) -> EppErrValueType:
        """Gets the value of this EppExtErrValueType.


        :return: The value of this EppExtErrValueType.
        :rtype: EppErrValueType
        """
        return self._value

    @value.setter
    def value(self, value: EppErrValueType):
        """Sets the value of this EppExtErrValueType.


        :param value: The value of this EppExtErrValueType.
        :type value: EppErrValueType
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
