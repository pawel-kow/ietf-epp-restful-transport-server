from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.sec_dns_chg_type import SecDNSChgType
from openapi_server.models.sec_dnsds_or_key_type import SecDNSDsOrKeyType
from openapi_server.models.sec_dns_rem_type import SecDNSRemType
from openapi_server import util

from openapi_server.models.sec_dns_chg_type import SecDNSChgType  # noqa: E501
from openapi_server.models.sec_dns_rem_type import SecDNSRemType  # noqa: E501
from openapi_server.models.sec_dnsds_or_key_type import SecDNSDsOrKeyType  # noqa: E501

class SecDNSUpdateType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, urgent=None, add=None, chg=None, rem=None):  # noqa: E501
        """SecDNSUpdateType - a model defined in OpenAPI

        :param urgent: The urgent of this SecDNSUpdateType.  # noqa: E501
        :type urgent: bool
        :param add: The add of this SecDNSUpdateType.  # noqa: E501
        :type add: SecDNSDsOrKeyType
        :param chg: The chg of this SecDNSUpdateType.  # noqa: E501
        :type chg: SecDNSChgType
        :param rem: The rem of this SecDNSUpdateType.  # noqa: E501
        :type rem: SecDNSRemType
        """
        self.openapi_types = {
            'urgent': bool,
            'add': SecDNSDsOrKeyType,
            'chg': SecDNSChgType,
            'rem': SecDNSRemType
        }

        self.attribute_map = {
            'urgent': '@urgent',
            'add': 'add',
            'chg': 'chg',
            'rem': 'rem'
        }

        self._urgent = urgent
        self._add = add
        self._chg = chg
        self._rem = rem

    @classmethod
    def from_dict(cls, dikt) -> 'SecDNSUpdateType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The secDNS_updateType of this SecDNSUpdateType.  # noqa: E501
        :rtype: SecDNSUpdateType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def urgent(self) -> bool:
        """Gets the urgent of this SecDNSUpdateType.


        :return: The urgent of this SecDNSUpdateType.
        :rtype: bool
        """
        return self._urgent

    @urgent.setter
    def urgent(self, urgent: bool):
        """Sets the urgent of this SecDNSUpdateType.


        :param urgent: The urgent of this SecDNSUpdateType.
        :type urgent: bool
        """

        self._urgent = urgent

    @property
    def add(self) -> SecDNSDsOrKeyType:
        """Gets the add of this SecDNSUpdateType.


        :return: The add of this SecDNSUpdateType.
        :rtype: SecDNSDsOrKeyType
        """
        return self._add

    @add.setter
    def add(self, add: SecDNSDsOrKeyType):
        """Sets the add of this SecDNSUpdateType.


        :param add: The add of this SecDNSUpdateType.
        :type add: SecDNSDsOrKeyType
        """

        self._add = add

    @property
    def chg(self) -> SecDNSChgType:
        """Gets the chg of this SecDNSUpdateType.


        :return: The chg of this SecDNSUpdateType.
        :rtype: SecDNSChgType
        """
        return self._chg

    @chg.setter
    def chg(self, chg: SecDNSChgType):
        """Sets the chg of this SecDNSUpdateType.


        :param chg: The chg of this SecDNSUpdateType.
        :type chg: SecDNSChgType
        """

        self._chg = chg

    @property
    def rem(self) -> SecDNSRemType:
        """Gets the rem of this SecDNSUpdateType.


        :return: The rem of this SecDNSUpdateType.
        :rtype: SecDNSRemType
        """
        return self._rem

    @rem.setter
    def rem(self, rem: SecDNSRemType):
        """Sets the rem of this SecDNSUpdateType.


        :param rem: The rem of this SecDNSUpdateType.
        :type rem: SecDNSRemType
        """

        self._rem = rem
