from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.epp_dcp_ours_type import EppDcpOursType
from openapi_server import util

from openapi_server.models.epp_dcp_ours_type import EppDcpOursType  # noqa: E501

class EppDcpRecipientType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, other=False, ours=None, public=False, same=False, unrelated=False):  # noqa: E501
        """EppDcpRecipientType - a model defined in OpenAPI

        :param other: The other of this EppDcpRecipientType.  # noqa: E501
        :type other: bool
        :param ours: The ours of this EppDcpRecipientType.  # noqa: E501
        :type ours: List[EppDcpOursType]
        :param public: The public of this EppDcpRecipientType.  # noqa: E501
        :type public: bool
        :param same: The same of this EppDcpRecipientType.  # noqa: E501
        :type same: bool
        :param unrelated: The unrelated of this EppDcpRecipientType.  # noqa: E501
        :type unrelated: bool
        """
        self.openapi_types = {
            'other': bool,
            'ours': List[EppDcpOursType],
            'public': bool,
            'same': bool,
            'unrelated': bool
        }

        self.attribute_map = {
            'other': 'other',
            'ours': 'ours',
            'public': 'public',
            'same': 'same',
            'unrelated': 'unrelated'
        }

        self._other = other
        self._ours = ours
        self._public = public
        self._same = same
        self._unrelated = unrelated

    @classmethod
    def from_dict(cls, dikt) -> 'EppDcpRecipientType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The epp_dcpRecipientType of this EppDcpRecipientType.  # noqa: E501
        :rtype: EppDcpRecipientType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def other(self) -> bool:
        """Gets the other of this EppDcpRecipientType.


        :return: The other of this EppDcpRecipientType.
        :rtype: bool
        """
        return self._other

    @other.setter
    def other(self, other: bool):
        """Sets the other of this EppDcpRecipientType.


        :param other: The other of this EppDcpRecipientType.
        :type other: bool
        """

        self._other = other

    @property
    def ours(self) -> List[EppDcpOursType]:
        """Gets the ours of this EppDcpRecipientType.


        :return: The ours of this EppDcpRecipientType.
        :rtype: List[EppDcpOursType]
        """
        return self._ours

    @ours.setter
    def ours(self, ours: List[EppDcpOursType]):
        """Sets the ours of this EppDcpRecipientType.


        :param ours: The ours of this EppDcpRecipientType.
        :type ours: List[EppDcpOursType]
        """
        if ours is not None and len(ours) < 0:
            raise ValueError("Invalid value for `ours`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._ours = ours

    @property
    def public(self) -> bool:
        """Gets the public of this EppDcpRecipientType.


        :return: The public of this EppDcpRecipientType.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public: bool):
        """Sets the public of this EppDcpRecipientType.


        :param public: The public of this EppDcpRecipientType.
        :type public: bool
        """

        self._public = public

    @property
    def same(self) -> bool:
        """Gets the same of this EppDcpRecipientType.


        :return: The same of this EppDcpRecipientType.
        :rtype: bool
        """
        return self._same

    @same.setter
    def same(self, same: bool):
        """Sets the same of this EppDcpRecipientType.


        :param same: The same of this EppDcpRecipientType.
        :type same: bool
        """

        self._same = same

    @property
    def unrelated(self) -> bool:
        """Gets the unrelated of this EppDcpRecipientType.


        :return: The unrelated of this EppDcpRecipientType.
        :rtype: bool
        """
        return self._unrelated

    @unrelated.setter
    def unrelated(self, unrelated: bool):
        """Sets the unrelated of this EppDcpRecipientType.


        :param unrelated: The unrelated of this EppDcpRecipientType.
        :type unrelated: bool
        """

        self._unrelated = unrelated
