from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.sec_dnsds_data_type import SecDNSDsDataType
from openapi_server.models.sec_dns_key_data_type import SecDNSKeyDataType
from openapi_server import util

from openapi_server.models.sec_dns_key_data_type import SecDNSKeyDataType  # noqa: E501
from openapi_server.models.sec_dnsds_data_type import SecDNSDsDataType  # noqa: E501

class SecDNSDsOrKeyType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_sig_life=None, ds_data=None, key_data=None):  # noqa: E501
        """SecDNSDsOrKeyType - a model defined in OpenAPI

        :param max_sig_life: The max_sig_life of this SecDNSDsOrKeyType.  # noqa: E501
        :type max_sig_life: int
        :param ds_data: The ds_data of this SecDNSDsOrKeyType.  # noqa: E501
        :type ds_data: List[SecDNSDsDataType]
        :param key_data: The key_data of this SecDNSDsOrKeyType.  # noqa: E501
        :type key_data: List[SecDNSKeyDataType]
        """
        self.openapi_types = {
            'max_sig_life': int,
            'ds_data': List[SecDNSDsDataType],
            'key_data': List[SecDNSKeyDataType]
        }

        self.attribute_map = {
            'max_sig_life': 'maxSigLife',
            'ds_data': 'dsData',
            'key_data': 'keyData'
        }

        self._max_sig_life = max_sig_life
        self._ds_data = ds_data
        self._key_data = key_data

    @classmethod
    def from_dict(cls, dikt) -> 'SecDNSDsOrKeyType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The secDNS_dsOrKeyType of this SecDNSDsOrKeyType.  # noqa: E501
        :rtype: SecDNSDsOrKeyType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_sig_life(self) -> int:
        """Gets the max_sig_life of this SecDNSDsOrKeyType.


        :return: The max_sig_life of this SecDNSDsOrKeyType.
        :rtype: int
        """
        return self._max_sig_life

    @max_sig_life.setter
    def max_sig_life(self, max_sig_life: int):
        """Sets the max_sig_life of this SecDNSDsOrKeyType.


        :param max_sig_life: The max_sig_life of this SecDNSDsOrKeyType.
        :type max_sig_life: int
        """
        if max_sig_life is not None and max_sig_life > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `max_sig_life`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if max_sig_life is not None and max_sig_life < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_sig_life`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_sig_life = max_sig_life

    @property
    def ds_data(self) -> List[SecDNSDsDataType]:
        """Gets the ds_data of this SecDNSDsOrKeyType.


        :return: The ds_data of this SecDNSDsOrKeyType.
        :rtype: List[SecDNSDsDataType]
        """
        return self._ds_data

    @ds_data.setter
    def ds_data(self, ds_data: List[SecDNSDsDataType]):
        """Sets the ds_data of this SecDNSDsOrKeyType.


        :param ds_data: The ds_data of this SecDNSDsOrKeyType.
        :type ds_data: List[SecDNSDsDataType]
        """
        if ds_data is None:
            raise ValueError("Invalid value for `ds_data`, must not be `None`")  # noqa: E501
        if ds_data is not None and len(ds_data) < 1:
            raise ValueError("Invalid value for `ds_data`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ds_data = ds_data

    @property
    def key_data(self) -> List[SecDNSKeyDataType]:
        """Gets the key_data of this SecDNSDsOrKeyType.


        :return: The key_data of this SecDNSDsOrKeyType.
        :rtype: List[SecDNSKeyDataType]
        """
        return self._key_data

    @key_data.setter
    def key_data(self, key_data: List[SecDNSKeyDataType]):
        """Sets the key_data of this SecDNSDsOrKeyType.


        :param key_data: The key_data of this SecDNSDsOrKeyType.
        :type key_data: List[SecDNSKeyDataType]
        """
        if key_data is None:
            raise ValueError("Invalid value for `key_data`, must not be `None`")  # noqa: E501
        if key_data is not None and len(key_data) < 1:
            raise ValueError("Invalid value for `key_data`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._key_data = key_data
