from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.domain_auth_info_type import DomainAuthInfoType
from openapi_server.models.domain_contact_type import DomainContactType
from openapi_server.models.domain_ns_type import DomainNsType
from openapi_server.models.domain_period_type import DomainPeriodType
from openapi_server.models.epp_ext_any_type import EppExtAnyType
from openapi_server.models.epp_login_type import EppLoginType
from openapi_server.models.epp_poll_type import EppPollType
from openapi_server.models.epp_read_write_type import EppReadWriteType
from openapi_server.models.epp_transfer_type import EppTransferType
from openapi_server import util

from openapi_server.models.domain_auth_info_type import DomainAuthInfoType  # noqa: E501
from openapi_server.models.domain_contact_type import DomainContactType  # noqa: E501
from openapi_server.models.domain_ns_type import DomainNsType  # noqa: E501
from openapi_server.models.domain_period_type import DomainPeriodType  # noqa: E501
from openapi_server.models.epp_ext_any_type import EppExtAnyType  # noqa: E501
from openapi_server.models.epp_login_type import EppLoginType  # noqa: E501
from openapi_server.models.epp_poll_type import EppPollType  # noqa: E501
from openapi_server.models.epp_read_write_type import EppReadWriteType  # noqa: E501
from openapi_server.models.epp_transfer_type import EppTransferType  # noqa: E501

class DomainCreateRequestAllOfCommandCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_info=None, contact=None, name=None, ns=None, period=None, registrant=None, cl_trid=None, extension=None, check=None, create=None, delete=None, info=None, login=None, logout=False, poll=None, renew=None, transfer=None, update=None):  # noqa: E501
        """DomainCreateRequestAllOfCommandCreate - a model defined in OpenAPI

        :param auth_info: The auth_info of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type auth_info: DomainAuthInfoType
        :param contact: The contact of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type contact: List[DomainContactType]
        :param name: The name of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type name: str
        :param ns: The ns of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type ns: DomainNsType
        :param period: The period of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type period: DomainPeriodType
        :param registrant: The registrant of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type registrant: str
        :param cl_trid: The cl_trid of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type cl_trid: str
        :param extension: The extension of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type extension: EppExtAnyType
        :param check: The check of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type check: EppReadWriteType
        :param create: The create of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type create: EppReadWriteType
        :param delete: The delete of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type delete: EppReadWriteType
        :param info: The info of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type info: EppReadWriteType
        :param login: The login of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type login: EppLoginType
        :param logout: The logout of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type logout: bool
        :param poll: The poll of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type poll: EppPollType
        :param renew: The renew of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type renew: EppReadWriteType
        :param transfer: The transfer of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type transfer: EppTransferType
        :param update: The update of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :type update: EppReadWriteType
        """
        self.openapi_types = {
            'auth_info': DomainAuthInfoType,
            'contact': List[DomainContactType],
            'name': str,
            'ns': DomainNsType,
            'period': DomainPeriodType,
            'registrant': str,
            'cl_trid': str,
            'extension': EppExtAnyType,
            'check': EppReadWriteType,
            'create': EppReadWriteType,
            'delete': EppReadWriteType,
            'info': EppReadWriteType,
            'login': EppLoginType,
            'logout': bool,
            'poll': EppPollType,
            'renew': EppReadWriteType,
            'transfer': EppTransferType,
            'update': EppReadWriteType
        }

        self.attribute_map = {
            'auth_info': 'authInfo',
            'contact': 'contact',
            'name': 'name',
            'ns': 'ns',
            'period': 'period',
            'registrant': 'registrant',
            'cl_trid': 'clTRID',
            'extension': 'extension',
            'check': 'check',
            'create': 'create',
            'delete': 'delete',
            'info': 'info',
            'login': 'login',
            'logout': 'logout',
            'poll': 'poll',
            'renew': 'renew',
            'transfer': 'transfer',
            'update': 'update'
        }

        self._auth_info = auth_info
        self._contact = contact
        self._name = name
        self._ns = ns
        self._period = period
        self._registrant = registrant
        self._cl_trid = cl_trid
        self._extension = extension
        self._check = check
        self._create = create
        self._delete = delete
        self._info = info
        self._login = login
        self._logout = logout
        self._poll = poll
        self._renew = renew
        self._transfer = transfer
        self._update = update

    @classmethod
    def from_dict(cls, dikt) -> 'DomainCreateRequestAllOfCommandCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DomainCreateRequest_allOf_command_create of this DomainCreateRequestAllOfCommandCreate.  # noqa: E501
        :rtype: DomainCreateRequestAllOfCommandCreate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_info(self) -> DomainAuthInfoType:
        """Gets the auth_info of this DomainCreateRequestAllOfCommandCreate.


        :return: The auth_info of this DomainCreateRequestAllOfCommandCreate.
        :rtype: DomainAuthInfoType
        """
        return self._auth_info

    @auth_info.setter
    def auth_info(self, auth_info: DomainAuthInfoType):
        """Sets the auth_info of this DomainCreateRequestAllOfCommandCreate.


        :param auth_info: The auth_info of this DomainCreateRequestAllOfCommandCreate.
        :type auth_info: DomainAuthInfoType
        """
        if auth_info is None:
            raise ValueError("Invalid value for `auth_info`, must not be `None`")  # noqa: E501

        self._auth_info = auth_info

    @property
    def contact(self) -> List[DomainContactType]:
        """Gets the contact of this DomainCreateRequestAllOfCommandCreate.


        :return: The contact of this DomainCreateRequestAllOfCommandCreate.
        :rtype: List[DomainContactType]
        """
        return self._contact

    @contact.setter
    def contact(self, contact: List[DomainContactType]):
        """Sets the contact of this DomainCreateRequestAllOfCommandCreate.


        :param contact: The contact of this DomainCreateRequestAllOfCommandCreate.
        :type contact: List[DomainContactType]
        """
        if contact is not None and len(contact) < 0:
            raise ValueError("Invalid value for `contact`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._contact = contact

    @property
    def name(self) -> str:
        """Gets the name of this DomainCreateRequestAllOfCommandCreate.


        :return: The name of this DomainCreateRequestAllOfCommandCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DomainCreateRequestAllOfCommandCreate.


        :param name: The name of this DomainCreateRequestAllOfCommandCreate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def ns(self) -> DomainNsType:
        """Gets the ns of this DomainCreateRequestAllOfCommandCreate.


        :return: The ns of this DomainCreateRequestAllOfCommandCreate.
        :rtype: DomainNsType
        """
        return self._ns

    @ns.setter
    def ns(self, ns: DomainNsType):
        """Sets the ns of this DomainCreateRequestAllOfCommandCreate.


        :param ns: The ns of this DomainCreateRequestAllOfCommandCreate.
        :type ns: DomainNsType
        """

        self._ns = ns

    @property
    def period(self) -> DomainPeriodType:
        """Gets the period of this DomainCreateRequestAllOfCommandCreate.


        :return: The period of this DomainCreateRequestAllOfCommandCreate.
        :rtype: DomainPeriodType
        """
        return self._period

    @period.setter
    def period(self, period: DomainPeriodType):
        """Sets the period of this DomainCreateRequestAllOfCommandCreate.


        :param period: The period of this DomainCreateRequestAllOfCommandCreate.
        :type period: DomainPeriodType
        """

        self._period = period

    @property
    def registrant(self) -> str:
        """Gets the registrant of this DomainCreateRequestAllOfCommandCreate.


        :return: The registrant of this DomainCreateRequestAllOfCommandCreate.
        :rtype: str
        """
        return self._registrant

    @registrant.setter
    def registrant(self, registrant: str):
        """Sets the registrant of this DomainCreateRequestAllOfCommandCreate.


        :param registrant: The registrant of this DomainCreateRequestAllOfCommandCreate.
        :type registrant: str
        """
        if registrant is not None and len(registrant) > 16:
            raise ValueError("Invalid value for `registrant`, length must be less than or equal to `16`")  # noqa: E501
        if registrant is not None and len(registrant) < 3:
            raise ValueError("Invalid value for `registrant`, length must be greater than or equal to `3`")  # noqa: E501

        self._registrant = registrant

    @property
    def cl_trid(self) -> str:
        """Gets the cl_trid of this DomainCreateRequestAllOfCommandCreate.


        :return: The cl_trid of this DomainCreateRequestAllOfCommandCreate.
        :rtype: str
        """
        return self._cl_trid

    @cl_trid.setter
    def cl_trid(self, cl_trid: str):
        """Sets the cl_trid of this DomainCreateRequestAllOfCommandCreate.


        :param cl_trid: The cl_trid of this DomainCreateRequestAllOfCommandCreate.
        :type cl_trid: str
        """
        if cl_trid is not None and len(cl_trid) > 64:
            raise ValueError("Invalid value for `cl_trid`, length must be less than or equal to `64`")  # noqa: E501
        if cl_trid is not None and len(cl_trid) < 3:
            raise ValueError("Invalid value for `cl_trid`, length must be greater than or equal to `3`")  # noqa: E501

        self._cl_trid = cl_trid

    @property
    def extension(self) -> EppExtAnyType:
        """Gets the extension of this DomainCreateRequestAllOfCommandCreate.


        :return: The extension of this DomainCreateRequestAllOfCommandCreate.
        :rtype: EppExtAnyType
        """
        return self._extension

    @extension.setter
    def extension(self, extension: EppExtAnyType):
        """Sets the extension of this DomainCreateRequestAllOfCommandCreate.


        :param extension: The extension of this DomainCreateRequestAllOfCommandCreate.
        :type extension: EppExtAnyType
        """

        self._extension = extension

    @property
    def check(self) -> EppReadWriteType:
        """Gets the check of this DomainCreateRequestAllOfCommandCreate.


        :return: The check of this DomainCreateRequestAllOfCommandCreate.
        :rtype: EppReadWriteType
        """
        return self._check

    @check.setter
    def check(self, check: EppReadWriteType):
        """Sets the check of this DomainCreateRequestAllOfCommandCreate.


        :param check: The check of this DomainCreateRequestAllOfCommandCreate.
        :type check: EppReadWriteType
        """
        if check is None:
            raise ValueError("Invalid value for `check`, must not be `None`")  # noqa: E501

        self._check = check

    @property
    def create(self) -> EppReadWriteType:
        """Gets the create of this DomainCreateRequestAllOfCommandCreate.


        :return: The create of this DomainCreateRequestAllOfCommandCreate.
        :rtype: EppReadWriteType
        """
        return self._create

    @create.setter
    def create(self, create: EppReadWriteType):
        """Sets the create of this DomainCreateRequestAllOfCommandCreate.


        :param create: The create of this DomainCreateRequestAllOfCommandCreate.
        :type create: EppReadWriteType
        """
        if create is None:
            raise ValueError("Invalid value for `create`, must not be `None`")  # noqa: E501

        self._create = create

    @property
    def delete(self) -> EppReadWriteType:
        """Gets the delete of this DomainCreateRequestAllOfCommandCreate.


        :return: The delete of this DomainCreateRequestAllOfCommandCreate.
        :rtype: EppReadWriteType
        """
        return self._delete

    @delete.setter
    def delete(self, delete: EppReadWriteType):
        """Sets the delete of this DomainCreateRequestAllOfCommandCreate.


        :param delete: The delete of this DomainCreateRequestAllOfCommandCreate.
        :type delete: EppReadWriteType
        """
        if delete is None:
            raise ValueError("Invalid value for `delete`, must not be `None`")  # noqa: E501

        self._delete = delete

    @property
    def info(self) -> EppReadWriteType:
        """Gets the info of this DomainCreateRequestAllOfCommandCreate.


        :return: The info of this DomainCreateRequestAllOfCommandCreate.
        :rtype: EppReadWriteType
        """
        return self._info

    @info.setter
    def info(self, info: EppReadWriteType):
        """Sets the info of this DomainCreateRequestAllOfCommandCreate.


        :param info: The info of this DomainCreateRequestAllOfCommandCreate.
        :type info: EppReadWriteType
        """
        if info is None:
            raise ValueError("Invalid value for `info`, must not be `None`")  # noqa: E501

        self._info = info

    @property
    def login(self) -> EppLoginType:
        """Gets the login of this DomainCreateRequestAllOfCommandCreate.


        :return: The login of this DomainCreateRequestAllOfCommandCreate.
        :rtype: EppLoginType
        """
        return self._login

    @login.setter
    def login(self, login: EppLoginType):
        """Sets the login of this DomainCreateRequestAllOfCommandCreate.


        :param login: The login of this DomainCreateRequestAllOfCommandCreate.
        :type login: EppLoginType
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")  # noqa: E501

        self._login = login

    @property
    def logout(self) -> bool:
        """Gets the logout of this DomainCreateRequestAllOfCommandCreate.


        :return: The logout of this DomainCreateRequestAllOfCommandCreate.
        :rtype: bool
        """
        return self._logout

    @logout.setter
    def logout(self, logout: bool):
        """Sets the logout of this DomainCreateRequestAllOfCommandCreate.


        :param logout: The logout of this DomainCreateRequestAllOfCommandCreate.
        :type logout: bool
        """
        if logout is None:
            raise ValueError("Invalid value for `logout`, must not be `None`")  # noqa: E501

        self._logout = logout

    @property
    def poll(self) -> EppPollType:
        """Gets the poll of this DomainCreateRequestAllOfCommandCreate.


        :return: The poll of this DomainCreateRequestAllOfCommandCreate.
        :rtype: EppPollType
        """
        return self._poll

    @poll.setter
    def poll(self, poll: EppPollType):
        """Sets the poll of this DomainCreateRequestAllOfCommandCreate.


        :param poll: The poll of this DomainCreateRequestAllOfCommandCreate.
        :type poll: EppPollType
        """
        if poll is None:
            raise ValueError("Invalid value for `poll`, must not be `None`")  # noqa: E501

        self._poll = poll

    @property
    def renew(self) -> EppReadWriteType:
        """Gets the renew of this DomainCreateRequestAllOfCommandCreate.


        :return: The renew of this DomainCreateRequestAllOfCommandCreate.
        :rtype: EppReadWriteType
        """
        return self._renew

    @renew.setter
    def renew(self, renew: EppReadWriteType):
        """Sets the renew of this DomainCreateRequestAllOfCommandCreate.


        :param renew: The renew of this DomainCreateRequestAllOfCommandCreate.
        :type renew: EppReadWriteType
        """
        if renew is None:
            raise ValueError("Invalid value for `renew`, must not be `None`")  # noqa: E501

        self._renew = renew

    @property
    def transfer(self) -> EppTransferType:
        """Gets the transfer of this DomainCreateRequestAllOfCommandCreate.


        :return: The transfer of this DomainCreateRequestAllOfCommandCreate.
        :rtype: EppTransferType
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer: EppTransferType):
        """Sets the transfer of this DomainCreateRequestAllOfCommandCreate.


        :param transfer: The transfer of this DomainCreateRequestAllOfCommandCreate.
        :type transfer: EppTransferType
        """
        if transfer is None:
            raise ValueError("Invalid value for `transfer`, must not be `None`")  # noqa: E501

        self._transfer = transfer

    @property
    def update(self) -> EppReadWriteType:
        """Gets the update of this DomainCreateRequestAllOfCommandCreate.


        :return: The update of this DomainCreateRequestAllOfCommandCreate.
        :rtype: EppReadWriteType
        """
        return self._update

    @update.setter
    def update(self, update: EppReadWriteType):
        """Sets the update of this DomainCreateRequestAllOfCommandCreate.


        :param update: The update of this DomainCreateRequestAllOfCommandCreate.
        :type update: EppReadWriteType
        """
        if update is None:
            raise ValueError("Invalid value for `update`, must not be `None`")  # noqa: E501

        self._update = update
