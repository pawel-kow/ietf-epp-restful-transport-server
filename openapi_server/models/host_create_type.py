from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.host_addr_type import HostAddrType
from openapi_server import util

from openapi_server.models.host_addr_type import HostAddrType  # noqa: E501

class HostCreateType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addr=None, name=None):  # noqa: E501
        """HostCreateType - a model defined in OpenAPI

        :param addr: The addr of this HostCreateType.  # noqa: E501
        :type addr: List[HostAddrType]
        :param name: The name of this HostCreateType.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'addr': List[HostAddrType],
            'name': str
        }

        self.attribute_map = {
            'addr': 'addr',
            'name': 'name'
        }

        self._addr = addr
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'HostCreateType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The host_createType of this HostCreateType.  # noqa: E501
        :rtype: HostCreateType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addr(self) -> List[HostAddrType]:
        """Gets the addr of this HostCreateType.


        :return: The addr of this HostCreateType.
        :rtype: List[HostAddrType]
        """
        return self._addr

    @addr.setter
    def addr(self, addr: List[HostAddrType]):
        """Sets the addr of this HostCreateType.


        :param addr: The addr of this HostCreateType.
        :type addr: List[HostAddrType]
        """
        if addr is not None and len(addr) < 0:
            raise ValueError("Invalid value for `addr`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._addr = addr

    @property
    def name(self) -> str:
        """Gets the name of this HostCreateType.


        :return: The name of this HostCreateType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this HostCreateType.


        :param name: The name of this HostCreateType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name
