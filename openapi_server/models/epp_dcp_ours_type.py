from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class EppDcpOursType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rec_desc=None):  # noqa: E501
        """EppDcpOursType - a model defined in OpenAPI

        :param rec_desc: The rec_desc of this EppDcpOursType.  # noqa: E501
        :type rec_desc: str
        """
        self.openapi_types = {
            'rec_desc': str
        }

        self.attribute_map = {
            'rec_desc': 'recDesc'
        }

        self._rec_desc = rec_desc

    @classmethod
    def from_dict(cls, dikt) -> 'EppDcpOursType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The epp_dcpOursType of this EppDcpOursType.  # noqa: E501
        :rtype: EppDcpOursType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rec_desc(self) -> str:
        """Gets the rec_desc of this EppDcpOursType.


        :return: The rec_desc of this EppDcpOursType.
        :rtype: str
        """
        return self._rec_desc

    @rec_desc.setter
    def rec_desc(self, rec_desc: str):
        """Sets the rec_desc of this EppDcpOursType.


        :param rec_desc: The rec_desc of this EppDcpOursType.
        :type rec_desc: str
        """
        if rec_desc is not None and len(rec_desc) > 255:
            raise ValueError("Invalid value for `rec_desc`, length must be less than or equal to `255`")  # noqa: E501
        if rec_desc is not None and len(rec_desc) < 1:
            raise ValueError("Invalid value for `rec_desc`, length must be greater than or equal to `1`")  # noqa: E501

        self._rec_desc = rec_desc
