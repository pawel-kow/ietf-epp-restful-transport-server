from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.epp_ext_any_type import EppExtAnyType
from openapi_server import util

from openapi_server.models.epp_ext_any_type import EppExtAnyType  # noqa: E501

class EppEppTypeOneOf4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension=None):  # noqa: E501
        """EppEppTypeOneOf4 - a model defined in OpenAPI

        :param extension: The extension of this EppEppTypeOneOf4.  # noqa: E501
        :type extension: EppExtAnyType
        """
        self.openapi_types = {
            'extension': EppExtAnyType
        }

        self.attribute_map = {
            'extension': 'extension'
        }

        self._extension = extension

    @classmethod
    def from_dict(cls, dikt) -> 'EppEppTypeOneOf4':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The epp_eppType_oneOf_4 of this EppEppTypeOneOf4.  # noqa: E501
        :rtype: EppEppTypeOneOf4
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension(self) -> EppExtAnyType:
        """Gets the extension of this EppEppTypeOneOf4.


        :return: The extension of this EppEppTypeOneOf4.
        :rtype: EppExtAnyType
        """
        return self._extension

    @extension.setter
    def extension(self, extension: EppExtAnyType):
        """Sets the extension of this EppEppTypeOneOf4.


        :param extension: The extension of this EppEppTypeOneOf4.
        :type extension: EppExtAnyType
        """
        if extension is None:
            raise ValueError("Invalid value for `extension`, must not be `None`")  # noqa: E501

        self._extension = extension
