from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.epp_err_value_type import EppErrValueType
from openapi_server.models.epp_ext_err_value_type import EppExtErrValueType
from openapi_server.models.epp_msg_type import EppMsgType
from openapi_server import util

from openapi_server.models.epp_err_value_type import EppErrValueType  # noqa: E501
from openapi_server.models.epp_ext_err_value_type import EppExtErrValueType  # noqa: E501
from openapi_server.models.epp_msg_type import EppMsgType  # noqa: E501

class EppResultType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code=None, msg=None, value=None, ext_value=None):  # noqa: E501
        """EppResultType - a model defined in OpenAPI

        :param code: The code of this EppResultType.  # noqa: E501
        :type code: int
        :param msg: The msg of this EppResultType.  # noqa: E501
        :type msg: EppMsgType
        :param value: The value of this EppResultType.  # noqa: E501
        :type value: EppErrValueType
        :param ext_value: The ext_value of this EppResultType.  # noqa: E501
        :type ext_value: EppExtErrValueType
        """
        self.openapi_types = {
            'code': int,
            'msg': EppMsgType,
            'value': EppErrValueType,
            'ext_value': EppExtErrValueType
        }

        self.attribute_map = {
            'code': '@code',
            'msg': 'msg',
            'value': 'value',
            'ext_value': 'extValue'
        }

        self._code = code
        self._msg = msg
        self._value = value
        self._ext_value = ext_value

    @classmethod
    def from_dict(cls, dikt) -> 'EppResultType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The epp_resultType of this EppResultType.  # noqa: E501
        :rtype: EppResultType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self) -> int:
        """Gets the code of this EppResultType.


        :return: The code of this EppResultType.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code: int):
        """Sets the code of this EppResultType.


        :param code: The code of this EppResultType.
        :type code: int
        """
        allowed_values = [1000, 1001, 1300, 1301, 1500, 2000, 2001, 2002, 2003, 2004, 2005, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2200, 2201, 2202, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2400, 2500, 2501, 2502]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def msg(self) -> EppMsgType:
        """Gets the msg of this EppResultType.


        :return: The msg of this EppResultType.
        :rtype: EppMsgType
        """
        return self._msg

    @msg.setter
    def msg(self, msg: EppMsgType):
        """Sets the msg of this EppResultType.


        :param msg: The msg of this EppResultType.
        :type msg: EppMsgType
        """
        if msg is None:
            raise ValueError("Invalid value for `msg`, must not be `None`")  # noqa: E501

        self._msg = msg

    @property
    def value(self) -> EppErrValueType:
        """Gets the value of this EppResultType.


        :return: The value of this EppResultType.
        :rtype: EppErrValueType
        """
        return self._value

    @value.setter
    def value(self, value: EppErrValueType):
        """Sets the value of this EppResultType.


        :param value: The value of this EppResultType.
        :type value: EppErrValueType
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def ext_value(self) -> EppExtErrValueType:
        """Gets the ext_value of this EppResultType.


        :return: The ext_value of this EppResultType.
        :rtype: EppExtErrValueType
        """
        return self._ext_value

    @ext_value.setter
    def ext_value(self, ext_value: EppExtErrValueType):
        """Sets the ext_value of this EppResultType.


        :param ext_value: The ext_value of this EppResultType.
        :type ext_value: EppExtErrValueType
        """
        if ext_value is None:
            raise ValueError("Invalid value for `ext_value`, must not be `None`")  # noqa: E501

        self._ext_value = ext_value
