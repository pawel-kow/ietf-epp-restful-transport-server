from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.sec_dns_key_data_type import SecDNSKeyDataType
import re
from openapi_server import util

from openapi_server.models.sec_dns_key_data_type import SecDNSKeyDataType  # noqa: E501
import re  # noqa: E501

class SecDNSDsDataType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alg=None, digest=None, digest_type=None, key_data=None, key_tag=None):  # noqa: E501
        """SecDNSDsDataType - a model defined in OpenAPI

        :param alg: The alg of this SecDNSDsDataType.  # noqa: E501
        :type alg: int
        :param digest: The digest of this SecDNSDsDataType.  # noqa: E501
        :type digest: str
        :param digest_type: The digest_type of this SecDNSDsDataType.  # noqa: E501
        :type digest_type: int
        :param key_data: The key_data of this SecDNSDsDataType.  # noqa: E501
        :type key_data: SecDNSKeyDataType
        :param key_tag: The key_tag of this SecDNSDsDataType.  # noqa: E501
        :type key_tag: int
        """
        self.openapi_types = {
            'alg': int,
            'digest': str,
            'digest_type': int,
            'key_data': SecDNSKeyDataType,
            'key_tag': int
        }

        self.attribute_map = {
            'alg': 'alg',
            'digest': 'digest',
            'digest_type': 'digestType',
            'key_data': 'keyData',
            'key_tag': 'keyTag'
        }

        self._alg = alg
        self._digest = digest
        self._digest_type = digest_type
        self._key_data = key_data
        self._key_tag = key_tag

    @classmethod
    def from_dict(cls, dikt) -> 'SecDNSDsDataType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The secDNS_dsDataType of this SecDNSDsDataType.  # noqa: E501
        :rtype: SecDNSDsDataType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alg(self) -> int:
        """Gets the alg of this SecDNSDsDataType.


        :return: The alg of this SecDNSDsDataType.
        :rtype: int
        """
        return self._alg

    @alg.setter
    def alg(self, alg: int):
        """Sets the alg of this SecDNSDsDataType.


        :param alg: The alg of this SecDNSDsDataType.
        :type alg: int
        """
        if alg is None:
            raise ValueError("Invalid value for `alg`, must not be `None`")  # noqa: E501

        self._alg = alg

    @property
    def digest(self) -> str:
        """Gets the digest of this SecDNSDsDataType.


        :return: The digest of this SecDNSDsDataType.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest: str):
        """Sets the digest of this SecDNSDsDataType.


        :param digest: The digest of this SecDNSDsDataType.
        :type digest: str
        """
        if digest is None:
            raise ValueError("Invalid value for `digest`, must not be `None`")  # noqa: E501
        if digest is not None and not re.search(r'[0-9a-fA-F]+', digest):  # noqa: E501
            raise ValueError("Invalid value for `digest`, must be a follow pattern or equal to `/[0-9a-fA-F]+/`")  # noqa: E501

        self._digest = digest

    @property
    def digest_type(self) -> int:
        """Gets the digest_type of this SecDNSDsDataType.


        :return: The digest_type of this SecDNSDsDataType.
        :rtype: int
        """
        return self._digest_type

    @digest_type.setter
    def digest_type(self, digest_type: int):
        """Sets the digest_type of this SecDNSDsDataType.


        :param digest_type: The digest_type of this SecDNSDsDataType.
        :type digest_type: int
        """
        if digest_type is None:
            raise ValueError("Invalid value for `digest_type`, must not be `None`")  # noqa: E501

        self._digest_type = digest_type

    @property
    def key_data(self) -> SecDNSKeyDataType:
        """Gets the key_data of this SecDNSDsDataType.


        :return: The key_data of this SecDNSDsDataType.
        :rtype: SecDNSKeyDataType
        """
        return self._key_data

    @key_data.setter
    def key_data(self, key_data: SecDNSKeyDataType):
        """Sets the key_data of this SecDNSDsDataType.


        :param key_data: The key_data of this SecDNSDsDataType.
        :type key_data: SecDNSKeyDataType
        """

        self._key_data = key_data

    @property
    def key_tag(self) -> int:
        """Gets the key_tag of this SecDNSDsDataType.


        :return: The key_tag of this SecDNSDsDataType.
        :rtype: int
        """
        return self._key_tag

    @key_tag.setter
    def key_tag(self, key_tag: int):
        """Sets the key_tag of this SecDNSDsDataType.


        :param key_tag: The key_tag of this SecDNSDsDataType.
        :type key_tag: int
        """
        if key_tag is None:
            raise ValueError("Invalid value for `key_tag`, must not be `None`")  # noqa: E501

        self._key_tag = key_tag
