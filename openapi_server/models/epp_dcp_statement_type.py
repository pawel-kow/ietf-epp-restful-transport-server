from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.epp_dcp_purpose_type import EppDcpPurposeType
from openapi_server.models.epp_dcp_recipient_type import EppDcpRecipientType
from openapi_server.models.epp_dcp_retention_type import EppDcpRetentionType
from openapi_server import util

from openapi_server.models.epp_dcp_purpose_type import EppDcpPurposeType  # noqa: E501
from openapi_server.models.epp_dcp_recipient_type import EppDcpRecipientType  # noqa: E501
from openapi_server.models.epp_dcp_retention_type import EppDcpRetentionType  # noqa: E501

class EppDcpStatementType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, purpose=None, recipient=None, retention=None):  # noqa: E501
        """EppDcpStatementType - a model defined in OpenAPI

        :param purpose: The purpose of this EppDcpStatementType.  # noqa: E501
        :type purpose: EppDcpPurposeType
        :param recipient: The recipient of this EppDcpStatementType.  # noqa: E501
        :type recipient: EppDcpRecipientType
        :param retention: The retention of this EppDcpStatementType.  # noqa: E501
        :type retention: EppDcpRetentionType
        """
        self.openapi_types = {
            'purpose': EppDcpPurposeType,
            'recipient': EppDcpRecipientType,
            'retention': EppDcpRetentionType
        }

        self.attribute_map = {
            'purpose': 'purpose',
            'recipient': 'recipient',
            'retention': 'retention'
        }

        self._purpose = purpose
        self._recipient = recipient
        self._retention = retention

    @classmethod
    def from_dict(cls, dikt) -> 'EppDcpStatementType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The epp_dcpStatementType of this EppDcpStatementType.  # noqa: E501
        :rtype: EppDcpStatementType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def purpose(self) -> EppDcpPurposeType:
        """Gets the purpose of this EppDcpStatementType.


        :return: The purpose of this EppDcpStatementType.
        :rtype: EppDcpPurposeType
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose: EppDcpPurposeType):
        """Sets the purpose of this EppDcpStatementType.


        :param purpose: The purpose of this EppDcpStatementType.
        :type purpose: EppDcpPurposeType
        """
        if purpose is None:
            raise ValueError("Invalid value for `purpose`, must not be `None`")  # noqa: E501

        self._purpose = purpose

    @property
    def recipient(self) -> EppDcpRecipientType:
        """Gets the recipient of this EppDcpStatementType.


        :return: The recipient of this EppDcpStatementType.
        :rtype: EppDcpRecipientType
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient: EppDcpRecipientType):
        """Sets the recipient of this EppDcpStatementType.


        :param recipient: The recipient of this EppDcpStatementType.
        :type recipient: EppDcpRecipientType
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")  # noqa: E501

        self._recipient = recipient

    @property
    def retention(self) -> EppDcpRetentionType:
        """Gets the retention of this EppDcpStatementType.


        :return: The retention of this EppDcpStatementType.
        :rtype: EppDcpRetentionType
        """
        return self._retention

    @retention.setter
    def retention(self, retention: EppDcpRetentionType):
        """Sets the retention of this EppDcpStatementType.


        :param retention: The retention of this EppDcpStatementType.
        :type retention: EppDcpRetentionType
        """
        if retention is None:
            raise ValueError("Invalid value for `retention`, must not be `None`")  # noqa: E501

        self._retention = retention
